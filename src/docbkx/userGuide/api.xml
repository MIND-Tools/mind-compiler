<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % myents SYSTEM "../shared.ent" >
%myents;
]>
<section id="api" xmlns="http://docbook.org/ns/docbook" version="5.0">
  <title>Fractal runtime reference</title>
  
  <section id="api-top-pkg">
    <title>The default package</title>
    
    <section>
      <title>The <filename>mindcommon.h</filename> file</title>
      
      <para>This file contains MIND common types and macro definitions. It is 
        included by generated code. These definitions
        can be configured thank to various "configuration macros". These
        configuration macros can be set in various way :
      </para>
      <itemizedlist>
        <listitem>
          <para>from the mindc command-line with the --c-flag option (see 
            <xref linkend="tool-compil"/>);</para>
        </listitem>
        <listitem>
          <para>in a target descriptor to specialize these common definitions 
            for a given platform or C compiler (see 
            <xref linkend="tool-targetdesc"/>);</para>
        </listitem>
        <listitem>
          <para>in an ADL definition with the <classname>@CFlags</classname> annotation do specialize 
            these common definitions for a given component (see
            <xref linkend="adl-annot-cflags"/>).</para>
        </listitem>
      </itemizedlist>
      
      <para>This file contains the following code :</para>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifdef __MIND_USERINCLUDE_H
 #include __MIND_USERINCLUDE_H
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>If the <varname>__MIND_USERINCLUDE_H</varname> macro is defined,
              it must be a path to an header file that is included here. This
              header file may contain macro definitions used in the rest of this
              file.</para>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifndef __MIND_NO_STDINT_H
 #ifndef __MIND_STDINT_H
 #define __MIND_STDINT_H &lt;stdint.h&gt;
 #endif
 #include __MIND_STDINT_H
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>Include <filename>&lt;stdint.h&gt;</filename>.</para>
            <para>The <varname>__MIND_NO_STDINT_H</varname> macro can be defined to avoid the inclusion of
              <filename>&lt;stdint.h&gt;</filename>.</para>
            <para>The <varname>__MIND_STDINT_H</varname> macro can be defined to override the path to the
              <filename>&lt;stdint.h&gt;</filename> file.</para>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifndef __MIND_NO_STDDEF_H
 #ifndef __MIND_STDDEF_H
 #define __MIND_STDDEF_H &lt;stddef.h&gt;
 #endif
 #include __MIND_STDDEF_H
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>Include <filename>&lt;stddef.h&gt;</filename>.</para>
            <para>The <varname>__MIND_NO_STDDEF_H</varname> macro can be defined to avoid the inclusion of
              <filename>&lt;stddef.h&gt;</filename>.</para>
            <para>The <varname>__MIND_STDDEF_H</varname> macro can be defined to override the path to the
              <filename>&lt;stddef.h&gt;</filename> file.</para>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifndef __MIND_STRING_TYPE
 #define __MIND_STRING_TYPE const char *
 #endif
 #ifndef __MIND_NO_STRING_TYPEDEF
 typedef __MIND_STRING_TYPE string;
 #define __MIND_STRING_TYPEDEF string
 #define __MIND_CONST_STRING_TYPEDEF const string
 #else
 #define __MIND_STRING_TYPEDEF __MIND_STRING_TYPE
 #define __MIND_CONST_STRING_TYPEDEF __MIND_STRING_TYPE const
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>Defines the <varname>string</varname> type.</para>
            <para>The <varname>__MIND_STRING_TYPE</varname> macro can be defined to override the default
              definition of the <varname>string</varname> type. (default definition is <varname>const char *</varname>).</para>
            <para>The <varname>__MIND_NO_STRING_TYPEDEF</varname> macro can be defined to avoid the definition
              of the <varname>string</varname> typedef.</para>
            <para>Note that the code generated by mindc, do not use the <varname>string</varname> typedef
              directly. It uses instead the <varname>__MIND_STRING_TYPEDEF</varname> macro. This macro expands
              to <varname>__MIND_STRING_TYPE</varname> if the <varname>__MIND_NO_STRING_TYPEDEF</varname> macro is defined,
              otherwise it expands to <varname>string</varname>.</para>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifdef __MIND_STRICT_C89
 #define __MIND_NO_INLINE
 #define __MIND_NO_GCC_ATTRIBUTE
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>__MIND_STRICT_C89</varname> macro can be used to force the generated code to be
              strictly compliant with C89. If this macro is defined, this implies that the
              <varname>__MIND_NO_INLINE</varname> and the <varname>__MIND_NO_GCC_ATTRIBUTE</varname> macros are defined.</para>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifndef __MIND_INLINE
 #ifdef __MIND_NO_INLINE
 #define __MIND_INLINE
 #else
 #define __MIND_INLINE inline
 #endif
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>Defines the <varname>__MIND_INLINE</varname> macro. This macro expands to the <varname>inline</varname> C keyword,
              and is used in the code generated by mindc.</para>
           <para>The <varname>__MIND_NO_INLINE</varname> macro can be defined to avoid the use of <varname>inline</varname>
             keyword in the generated code. (This is required to compile code in stdc89)</para>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifndef __MIND_ATTRIBUTE
 #ifdef __MIND_NO_GCC_ATTRIBUTE
 #define __MIND_ATTRIBUTE(attr)
 #else
 #define __MIND_ATTRIBUTE(attr) __attribute__(attr)
 #endif
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>__MIND_NO_GCC_ATTRIBUTE</varname> macro can be defined to avoid the use of gcc
              attribute in the generated code. Note that if the <varname>__MIND_NO_GCC_ATTRIBUTE</varname> is
              defined, the compilation of the generated code may raise some warnings when
              compiled with GCC with the "-Wall" flag.</para>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="c"> #ifndef __MIND_ATTRIBUTE_UNUSED
 #define __MIND_ATTRIBUTE_UNUSED __MIND_ATTRIBUTE((unused))
 #endif</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>__MIND_ATTRIBUTE_UNUSED</varname> macro is used to add the <varname>unused</varname> GCC attribute
              to some generated functions.</para>
          </td>
        </tr>
      </informaltable>
    </section>
    
  </section>
  
  <section id="api-fapi-pkg">
    <title>The <classname>fractal.api</classname> package</title>
    
    <section id="api-fapi-C">
      <title>The <classname>fractal.api.Component</classname> interface</title>
      
      <para>This interface use constants defined in 
        <link linkend="api-fapi-EC"><filename>fractal/api/ErrorConst.idt</filename></link>.</para>
      
      <para>This interface defines the following methods:</para>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcInterface(in const string interfaceName,
   out void* interfaceReference);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcInterface</varname> method returns an external interface of the component to which this interface
              belongs.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>interfaceName</varname></term>
                <listitem><para>the name of the external interface that must be
                  returned.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>interfaceReference</varname></term>
                <listitem><para> (out parameter) the external interface of the
                  component to which this interface belongs, whose name is equal to the
                  given name.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the interface exist and has been returned
                  correctly or <varname>FRACTAL_API_NO_SUCH_INTERFACE</varname> if there
                  is no such interface.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int listFcInterfaces(in const string interfaceNames[]);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>listFcInterfaces</varname> method returns the names of the external interfaces of the component to which this
              interface belongs. More precisely, if the given <code>interfaceNames</code>
              is <code>null</code>, this method returns the number of external 
              interfaces. If it is not <code>null</code>, this method assumes that the 
              given array is big enough to contain all the names of the external 
              interfaces.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>interfaceNames</varname></term>
                <listitem><para>an array into which names of the external
                  interfaces are copied. Can be <code>null</code>.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>the number of interface names; or
                  <varname>FRACTAL_API_OPERATION_NOT_SUPPORTED</varname> if this 
                  operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcInterfaceRole(in const string interfaceName);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcInterfaceRole</varname> method returns the role of an external interface of the component to which 
              this interface belongs.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>interfaceName</varname></term>
                <listitem><para>the name of an external interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the interface exist and is a client interface;
                  <code>1</code> if the interface exist and is a server interface;
                  or <varname>FRACTAL_API_NO_SUCH_INTERFACE</varname> if there is no such
                  interface.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcInterfaceSignature(in const string interfaceName,
   out const string signature);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcInterfaceSignature</varname> method returns the 
              signature of an external interface of the component to which 
              this interface belongs.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>interfaceName</varname></term>
                <listitem><para>the name of an external interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>signature</varname></term>
                <listitem><para>(out parameter) the signature of the external interface of
                  the component to which this interface belongs, whose name is equal to
                  the given name.the signature of the external interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the interface exist and its signature has been
                  returned correctly or <varname>FRACTAL_API_NO_SUCH_INTERFACE</varname> if there
                  is no such interface.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcInterfaces(in void* interfaceReferences[]);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcInterfaces</varname> method returns the external 
              interfaces of the component to which this interface
              belongs. More precisely, if the given <code>interfaceReferences</code> is
              <code>null</code>, this method returns the number of external interfaces.
              If it is not <code>null</code>, this method assumes that the given array is
              big enough to contain all the external interfaces.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>interfaceReferences</varname></term>
                <listitem><para>an array into which references of the external
                  interfaces are copied. Can be <code>null</code>.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>the number of interface references; or
                  <varname>FRACTAL_API_OPERATION_NOT_SUPPORTED</varname> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    </section>
    
    <section id="api-fapi-BC">
      <title>The <classname>fractal.api.BindingController</classname> interface</title>

      <para>This interface use constants defined in 
        <link linkend="api-fapi-EC"><filename>fractal/api/ErrorConst.idt</filename></link>.</para>
      
      <para>This interface defines the following methods:</para>

      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int listFc(in const string clientItfNames[]);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>listFc</varname> method returns the names of the
              client interfaces of the component to which this
              interface belongs. More precisely, if the given <code>clientItfNames</code>
              is <code>null</code>, this method returns the number of client interfaces.
              If it is not <code>null</code>, this method assumes that the given array is
              big enough to contain all the client interface names.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>clientItfNames</varname></term>
                <listitem><para>an array into which client interface names are
                  copied. Can be <code>null</code>.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>the number of client interfaces; or
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int lookupFc(in const string clientItfName, 
   out void* interfaceReference);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>lookupFc</varname> method returns the interface to which the 
              given client interface is bound. More
              precisely, returns the server interface to which the client interface whose
              name is given is bound. This server interface is necessarily in the same
              address space as the client interface.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>clientItfName</varname></term>
                <listitem><para>the name of a client interface of the component to
                  which this interface belongs.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>interfaceReference</varname></term>
                <listitem><para>(out parameter) the server interface to which the
                  given interface is bound.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_NO_SUCH_INTERFACE</code> if there is no such client
                  interface.
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int bindFc(in const string clientItfName, in void* serverItf);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>bindFc</varname> method binds the client interface whose
              name is given to a server interface. More precisely, binds the client 
              interface of the component to which this interface belongs, and whose 
              name is equal to the given name, to the given server interface. The given
              server interface must be in the same address space as the client interface.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>clientItfName</varname></term>
                <listitem><para>the name of a client interface of the component to
                  which this interface belongs.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>serverItf</varname></term>
                <listitem><para>a server interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_NO_SUCH_INTERFACE</code> if there is no such client
                  interface. <code>FRACTAL_API_ILLEGAL_BINDING</code> if the binding cannot
                  be created. <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if this component
                  has a {<code>LifeCycleController</code> interface, but it is not in an
                  appropriatestate to perform this operation.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int unbindFc(in const string clientItfName);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>unbindFc</varname> method unbinds the given client 
              interface. More precisely, unbinds the client
              interface of the component to which this interface belongs, and whose name
              is equal to the given name.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>clientItfName</varname></term>
                <listitem><para>the name of a client interface of the component to
                  which this interface belongs.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_NO_SUCH_INTERFACE</code> if there is no such client
                  interface. <code>FRACTAL_API_ILLEGAL_BINDING</code> if the binding cannot
                  be created. <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if this component
                  has a {<code>LifeCycleController</code> interface, but it is not in an
                  appropriatestate to perform this operation.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
    </section>
    
    <section id="api-fapi-CC">
      <title>The <classname>fractal.api.ContentController</classname> interface</title>

      <para>This interface use constants defined in 
        <link linkend="api-fapi-EC"><filename>fractal/api/ErrorConst.idt</filename></link>.</para>
      
      <para>A component interface to control the content of the component to which it
        belongs. This content is supposed to be made of an unordered, unstructured
        set of components and bindings.</para>
      
      <para>This interface defines the following methods:</para>

      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcSubComponents(in fractal.api.Component subComponents[]);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcSubComponents</varname> method returns the sub-components
               of the component to which this interface belongs. More precisely,
               if the given <code>subComponents</code> is <code>null</code>, this
               method returns the number of sub components. If it is not 
               <code>null</code>, this method assumes that the given array is big
               enough to contain all the references to the <code>Component</code>
               interfaces of the sub components.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>subComponents</varname></term>
                <listitem><para>an array into which the references to the
                  <link linkend="api-fapi-C"><classname>fractal.api.Component</classname></link>
                  interfaces of the sub components are copied. Can be
                  <code>null</code>.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>the number of sub components; or
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>

      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcSubComponent(in string name, out fractal.api.Component subComponent);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcSubComponent</varname> method returns the
               sub-component of the component to which this interface belongs 
               and which has the given <code>name</code>.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>name</varname></term>
                <listitem><para>the name of the sub-component to return.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>subComponent</varname></term>
                <listitem><para> (out parameter) the 
                  <link linkend="api-fapi-C"><classname>fractal.api.Component</classname></link> 
                  interface of the sub-component.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the sub-component has been 
                  returned correctly. <code>FRACTAL_API_NO_SUCH_SUB_COMPONENT</code>
                  if no sub-component with the given name can be found.
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this 
                  operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcSubComponentName(in fractal.api.Component subComponent,
   out string name);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcSubComponentName</varname> method returns
              the name of the given sub-component.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>subComponent</varname></term>
                <listitem><para>the 
                  <link linkend="api-fapi-C"><classname>fractal.api.Component</classname></link>
                  interface of a sub-component.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>name</varname></term>
                <listitem><para> (out parameter) the name of the given sub-component.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para> <code>0</code> if the name of the sub-component
                  has been returned correctly. 
                  <code>FRACTAL_API_NO_SUCH_SUB_COMPONENT</code> if the given
                  <code>subComponent</code> is not a sub component.
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this 
                  operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int addFcSubComponent(in fractal.api.Component subComponent);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>addFcSubComponent</varname> method adds a sub-component 
            to this component. More precisely adds the component whose reference
            is given as a sub-component of the component to which this interface
            belongs. If <varname>C</varname> is the sub-component set returned
            by <varname>getFcSubComponents</varname> just before a call to this
            method, and <varname>C'</varname> is the sub-component set just 
            after this call, then <code>subComponent</code> is guaranteed to be
            in <varname>C'</varname>, but <varname>C'</varname> is 
            <emphasis>not</emphasis> guaranteed to be the union of 
            <varname>C</varname> and <code>{subComponent}</code>, nor to contain
            all the elements of <varname>C</varname>.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>subComponent</varname></term>
                <listitem><para>the component to be added inside this component.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the component is added 
                  correctly. <code>FRACTAL_API_ILLEGAL_CONTENT</code> if the 
                  component cannot be added. 
                  <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if this component
                  has a 
                  interface, but it is not in an appropriate state to perform 
                  this operation. <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code>
                  if this operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int addFcSubComponent(in fractal.api.Component subComponent);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>addFcSubComponent</varname> method adds a sub-component 
            to this component with the given local-name. More precisely adds the component whose reference
            is given as a sub-component of the component to which this interface
            belongs. If <varname>C</varname> is the sub-component set returned
            by <varname>getFcSubComponents</varname> just before a call to this
            method, and <varname>C'</varname> is the sub-component set just 
            after this call, then <code>subComponent</code> is guaranteed to be
            in <varname>C'</varname>, but <varname>C'</varname> is 
            <emphasis>not</emphasis> guaranteed to be the union of 
            <varname>C</varname> and <code>{subComponent}</code>, nor to contain
            all the elements of <varname>C</varname>.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>subComponent</varname></term>
                <listitem><para>the component to be added inside this component.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>name</varname></term>
                <listitem><para>the local-name of the added sub-component. May be 
                  <code>null</code>.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the component is added 
                  correctly. <code>FRACTAL_API_ILLEGAL_CONTENT</code> if the 
                  component cannot be added. 
                  <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if this component
                  has a 
                  interface, but it is not in an appropriate state to perform 
                  this operation. <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code>
                  if this operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int removeFcSubComponent(in fractal.api.Component subComponent);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>removeFcSubComponent</varname> method removes a
              sub-component from this component. More precisely removes the
              sub-component whose reference is given from the component to which
              this interface belongs. If <varname>C</varname> is the sub-component
              set returned by <code>getFcSubComponents</code> just before a call
              to this method, and <varname>C''</varname> is the sub-component set
              just after this call, then <code>subComponent</code> is guaranteed
              not to be in <varname>C''</varname>, but <varname>C''</varname> is
              <emphasis>not</emphasis> guaranteed to be the difference of 
              <varname>C</varname> and <code>{subComponent}</code>, nor to 
              contain all the elements of <varname>C</varname> distinct from 
              <code>subComponent</code>.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>subComponent</varname></term>
                <listitem><para>the component to be removed from this component.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>serverItf</varname></term>
                <listitem><para>a server interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the component has been removed correctly.
                  <code>FRACTAL_API_ILLEGAL_CONTENT</code> if the component 
                  cannot be removed. <code>FRACTAL_API_NO_SUCH_SUB_COMPONENT</code>
                  if the given <code>subComponent</code> is not a sub component.
                  <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if this component
                  has a <link linkend="api-fapi-LCC">LifeCycleController</link>
                  interface, but it is not in an appropriate state to perform 
                  this operation. <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code>
                  if this operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int addFcSubBinding(in fractal.api.Component clientComponent,
   in string clientItfName, in fractal.api.Component serverComponent,
   in string serverItfName);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>addFcSubBinding</varname> method creates a binding
              inside this component.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>clientComponent</varname></term>
                <listitem><para>the component that contains the client interface
                  that has to be bound. If <code>null</code> the client component is
                  assumed to be the component this interface belongs.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>clientItfName</varname></term>
                <listitem><para>the name of the interface at the client side of the
                  binding. If the given <code>clientComponent</code> is a sub component;
                  this name must refer to a client interface. If the given
                  <code>clientComponent</code> refers to the component this interface
                  belongs; this name must refer to a server interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>serverComponent</varname></term>
                <listitem><para>the component that contains the server interface
                  that has to be bound. If <code>null</code> the server component is
                  assumed to be the component this interface belongs.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>serverItfName</varname></term>
                <listitem><para>the name of the interface at the server side of the
                  binding. If the given <code>serverComponent</code> is a sub component;
                  this name must refer to a server interface. If the given
                  <code>serverComponent</code> refers to the component this interface
                  belongs; this name must refer to a client interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the binding has been added correctly.
                  <code>FRACTAL_API_ILLEGAL_BINDING</code> if the binding cannot
                  be created. <code>FRACTAL_API_NO_SUCH_SUB_COMPONENT</code> if
                  the <code>clientComponent</code> or the <code>serverComponent</code> is
                  neither a sub component nor the component this interface belongs.
                  <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if this component has a
                  <link linkend="api-fapi-LCC">LifeCycleController</link> 
                  interface, but it is not in an appropriate state to perform 
                  this operation. <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code>
                  if this operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int removeFcSubBinding(in fractal.api.Component clientComponent,
   in string clientItfName);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>removeFcSubBinding</varname> method removes a binding
              inside this component.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>clientComponent</varname></term>
                <listitem><para>the component that contains the client interface
                  that has to be unbound. If <code>null</code> the client component is
                  assumed to be the component this interface belongs.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>clientItfName</varname></term>
                <listitem><para>the name of the interface that has to be unbound.
                  If the given <code>clientComponent</code> is a sub component;
                  this name must refer to a client interface. If the given
                  <code>clientComponent</code> refers to the component this interface
                  belongs; this name must refer to a server interface.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the binding has been removed correctly.
                  <code>FRACTAL_API_ILLEGAL_BINDING</code> if the binding cannot
                  be removed. <code>FRACTAL_API_NO_SUCH_SUB_COMPONENT</code> if
                  the <code>clientComponent</code> is neither a sub component 
                  nor the component this interface belongs.
                  <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if this component has a
                  <link linkend="api-fapi-LCC">LifeCycleController</link> 
                  interface, but it is not in an appropriate state to perform 
                  this operation. <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code>
                  if this operation is not supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
    </section>
    
    <section id="api-fapi-AC">
      <title>The <classname>fractal.api.AttributeController</classname> interface</title>

      <para>This interface use constants defined in 
        <link linkend="api-fapi-EC"><filename>fractal/api/ErrorConst.idt</filename></link>.</para>
      
      <para>This interface defines the following type:</para>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> enum AttributeType {
   INT_ATTR_TYPE,
   STRING_ATTR_TYPE,
   UINT8_ATTR_TYPE,
   INT16_ATTR_TYPE,
   UINT16_ATTR_TYPE,
   INT32_ATTR_TYPE,
   UINT32_ATTR_TYPE,
   INT64_ATTR_TYPE,
   UINT64_ATTR_TYPE,
   INTPTR_ATTR_TYPE,
   UINTPTR_ATTR_TYPE
 };</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>enum AttributeType</varname> enumerates the available 
              attribute types.</para>
          </td>
        </tr>
      </informaltable>
      
      <para>This interface defines the following methods:</para>

      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int listFcAttributes(in const string attributeNames[]);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>listFcAttributes</varname> method returns the names of 
              the attributes of the component to which this
              interface belongs. More precisely, if the given <code>attributeNames</code>
              is <code>null</code>, this method returns the number of attributes. If it
              is not <code>null</code>, this method assumes that the given array is big
              enough to contain all the attribute names.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>attributeNames</varname></term>
                <listitem><para>an array into which attribute names are
                  copied. Can be <code>null</code>.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>the number of attributes; or
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcAttribute(in const string attributeName, out void *value);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcAttribute</varname> method returns the value of an
              attribute.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>attributeName</varname></term>
                <listitem><para>the name of the attribute to return.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>value</varname></term>
                <listitem><para>(out parameter) the value of the attribute.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_NO_SUCH_ATTRIBUTE</code> if there is no such 
                  attribute.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcAttributeSize(in const string attributeName);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcAttributeSize</varname> method returns the size of
              an attribute (in byte).</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>attributeName</varname></term>
                <listitem><para>the name of the attribute to return.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>the size if the attribute or <code>FRACTAL_API_NO_SUCH_ATTRIBUTE</code>
                  if there is no such attribute.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcAttributeType(in const string attributeName,
   out enum AttributeType type);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcAttributeType</varname> method returns the type of
        an attribute.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>attributeName</varname></term>
                <listitem><para>the name of the attribute to return.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>type</varname></term>
                <listitem><para>(out parameter) the type of the attribute.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_NO_SUCH_ATTRIBUTE</code> if there is no such 
                  attribute.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int setFcAttribute(in const string attributeName, in void *value);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>setFcAttribute</varname> method sets the value of an attribute.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>attributeName</varname></term>
                <listitem><para>the name of the attribute to set.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>value</varname></term>
                <listitem><para>the value of the attribute to set.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_NO_SUCH_ATTRIBUTE</code> if there is no such attribute.
                  <code>FRACTAL_API_ILLEGAL_ATTRIBUTE</code> if the attribute is not settable.
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    </section>
    
    <section id="api-fapi-LCC">
      <title>The <classname>fractal.api.LifeCycleController</classname> interface</title>

      <para>This interface use constants defined in 
        <link linkend="api-fapi-EC"><filename>fractal/api/ErrorConst.idt</filename></link>.</para>
      
      <para>This interface defines the following methods:</para>

      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int getFcState();</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>getFcState</varname> method returns the execution state of the component
              to which this interface belongs.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the component to which this interface belongs is 
                  stopped; <code>1</code> if the component is started. 
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int startFc();</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>startFc</varname> method starts the component to which
              this interface belongs.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if it fails.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int stopFc();</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>stopFc</varname> method stops the component to which this interface belongs. The result of a method
              call on a stopped component is undefined, except on its control interfaces
             (these calls are executed normally).</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the operation succeed.
                  <code>FRACTAL_API_ILLEGAL_LIFE_CYCLE</code> if it fails.
                  <code>FRACTAL_API_OPERATION_NOT_SUPPORTED</code> if this operation is not
                  supported.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    </section>
    
    <section id="api-fapi-F">
      <title>The <classname>fractal.api.Factory</classname> interface</title>
          
      <para>This interface use constants defined in 
        <link linkend="api-fapi-EC"><filename>fractal/api/ErrorConst.idt</filename></link>.</para>
      
      <para>This interface defines the following methods:</para>

      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int newFcInstance(out void* instance);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>newFcInstance</varname> method creates a new component.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>instance</varname></term>
                <listitem><para>(out parameter) the created instance.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the new instance has been created correctly.
                 <code>INSTANTIATION_ERROR</code> if the instantiation fails.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int destroyFcInstance(in void* instance);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>The <varname>destroyFcInstance</varname> method destroys a previously created component.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>instance</varname></term>
                <listitem><para>the component instance to destroy.</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para><code>0</code> if the new instance has been created correctly.
                <code>ILLEGAL_LIFE_CYCLE</code> if the component has a
                <classname>LifeCycleController</classname> interface, but it is not in 
                an appropriate state to perform this operation.
                <code>INSTANTIATION_ERROR</code> if the destroy fails.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
    </section>
    
    <section id="api-fapi-EC">
      <title><filename>fractal/api/ErrorConst.idt</filename></title>
      
      <para>This file defines the following constants:</para>
      
      <programlisting language="idl"> #define FRACTAL_API_OK                       0
 #define FRACTAL_API_INVALID_ARG             -1
 #define FRACTAL_API_OPERATION_NOT_SUPPORTED -2
 #define FRACTAL_API_NO_SUCH_INTERFACE       -3
 #define FRACTAL_API_CLIENT                   0
 #define FRACTAL_API_SERVER                   1

 #define FRACTAL_API_ILLEGAL_BINDING        -10

 #define FRACTAL_API_NO_SUCH_ATTRIBUTE      -30
 #define FRACTAL_API_ILLEGAL_ATTRIBUTE      -31

 #define FRACTAL_API_ILLEGAL_LIFE_CYCLE     -40
 #define FRACTAL_API_STOPPED                  0
 #define FRACTAL_API_STARTED                  1</programlisting>
    </section>
    
  </section>
  
  <section id="api-memapi-pkg">
    <title>The <classname>memory.api</classname> package</title>
    
    <section id="api-memapi-Allocator">
      <title>The <classname>memory.api.Allocator</classname> interface</title>
      
      
      <para>A common interface to allocate and free memory space.</para>
      
      <para>This interface defines the following methods:</para>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> void *alloc(int size);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>This method allocates <varname>size</varname> bytes and returns a pointer 
              to the allocated memory. The memory is not cleared. The value 
              returned is a pointer to the allocated memory, which is suitably 
              aligned for any kind of variable, or <code>NULL</code> if the 
              request fails.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>size</varname></term>
                <listitem><para>the amount of memory requested (in byte).</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>pointer to the allocated memory.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> void free(void *addr);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>This method frees the memory space pointed to by 
              <varname>addr</varname>, which must have been returned by a 
              previous call to <varname>alloc</varname>. Otherwise, or if free 
              has already been called before with the same <varname>addr</varname>,
              the behavior is undefined.</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>addr</varname></term>
                <listitem><para>the pointer to be freed. May be <code>NULL</code>,
                  in which case this operation does nothing.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
  	</section>
  </section>

  <section id="api-mem-pkg">
    <title>The <classname>memory</classname> package</title>
	<section>
      <title>The <classname>memory.AllocatorType</classname> component type</title>
	  
	  <para>A Type definition for memory allocator components. Provides a single interface
	    called <varname>allocation</varname> whose type is 
	    <link linkend="api-memapi-Allocator"><classname>memory.api.Allocator</classname></link>.</para>
	</section>
	
	<section>
      <title>The <classname>memory.Malloc</classname> component</title>
	  
	  <para>A simple memory allocator component that use <code>malloc</code> and 
        <code>free</code> system calls to allocate/free memory.</para>
	</section>
  </section>  
  
  <section id="api-boot-pkg">
    <title>The <classname>boot</classname> package</title>
	<section id="api-boot-Main">
      <title>The <classname>boot.Main</classname> interface</title>
	  
	  <para>The <classname>boot.Main</classname> IDL defines a <methodname>main</methodname> method. A
        component-based application must provides an interface of this type, so that it can be
        launched by a bootstrap component.</para>
      
      <para>This interface defines the following method:</para>
      
      <informaltable border="all" width="100%">
        <tr>
          <td>
            <programlisting language="idl"> int main(int argc, char **argv);</programlisting>
          </td>
        </tr>
        <tr>
          <td>
            <para>Application entry-points</para>
          </td>
        </tr>
        <tr>
          <td>
            <variablelist>
              <varlistentry>
                <term><varname>argc</varname></term>
                <listitem><para>Argument count</para></listitem>
              </varlistentry>
              <varlistentry>
                <term><varname>argv</varname></term>
                <listitem><para>Argument values</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>return</term>
                <listitem><para>Return value. By convention '0' means OK, any other value
                  is considered as an error.</para></listitem>
              </varlistentry>
            </variablelist>
          </td>
        </tr>
      </informaltable>
	</section>
	<section id="api-boot-AppType">
      <title>The <classname>boot.ApplicationType</classname> component type</title>
	  <para>An ADL type that can be extended by application components (i.e. components
        providing an <varname>entryPoint</varname> interface of type 
        <link linkend="api-boot-Main"><classname>boot.Main</classname></link>).</para>
	</section>
	
	<section id="api-boot-Bootstrap">
	  <title>The <classname>boot.Bootstrap</classname> component</title>
	  
	  <para>The <classname>boot.Bootstrap</classname> primitive component is used to initialize and launch a 
        component-based application on a POSIX system.</para>
      <para>It requires an <varname>entryPoint</varname> interface that is intended to be bound to the 
        <link linkend="api-boot-Main"><classname>boot.Main</classname></link> 
        provided interface of the component-based application. It also requires a 
        optional <varname>appLCC</varname> interface. This interface can be bound to the 
        <link linkend="api-fapi-LCC"><classname>fractal.api.LifeCycleController</classname></link>
        interface of the application, if this latter provides it.</para>
      <para>The component implementation contains the definition of the traditional "main"
        C function that is executed when the application is launched.</para>
      <para>This component is singleton.</para>
	</section>
	
	<section id="api-boot-GenApp">
	  <title>The <classname>boot.GenericApplication</classname> template component</title>
	  
	  <para>This template ADL defines a generic top-level architecture made of a 
        <link linkend="api-boot-Bootstrap"><classname>boot.Bootstrap</classname></link>
        component and a generic <varname>App</varname> component bound together.</para>
	  <para>The generic <varname>App</varname> component must conforms to the 
	    <link linkend="api-boot-AppType"><classname>boot.ApplicationType</classname></link>.</para>
      <para>This component is singleton.</para>
	</section>
	
	<section id="api-boot-LCCAppType">
      <title>The <classname>boot.LCCApplicationType</classname> component type</title>
	  <para>An ADL type that can be extended by <link linkend="api-boot-AppType">application components</link>
	    that also have a <link linkend="api-fapi-LCC"><classname>fractal.api.LifeCycleController</classname></link>
	    interface.</para>
	</section>
	
	<section id="api-boot-GenLCCApp">
	  <title>The <classname>boot.GenericLCCApplication</classname> template component</title>
	  
	  <para>This template ADL defines a generic top-level architecture made of a 
        <link linkend="api-boot-Bootstrap"><classname>boot.Bootstrap</classname></link>
        component and a generic <varname>App</varname> component bound together.</para>
	  <para>The generic <varname>App</varname> component must conforms to the 
	    <link linkend="api-boot-LCCAppType"><classname>boot.LCCApplicationType</classname></link>.</para>
      <para>This component is singleton.</para>
	</section>
  </section>  
  
</section>