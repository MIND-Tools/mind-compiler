<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "../dtd/docbookx.dtd" [
<!ENTITY % myents SYSTEM "../shared.ent" >
%myents;
]>
<section id="idl">
     <title>Interface definition language</title>
    <titleabbrev>IDL</titleabbrev>
    <para>The IDL language allows to define component interface types. 
      It is highly inspired by the C-type system. That is, most of the types that can
      be declared in C can be declared similarly in the IDL language (except 
      function pointers that are not allowed by the IDL language). In addition
      the IDL language provides a special construct for the definition of interface 
      since this kind of notion is not present in C.</para>
    
    <para>The IDL language defines two kinds of files : </para>
    <variablelist>
      <varlistentry>
        <term><filename>'.itf'</filename> file</term>
        <listitem>
          <para>Contains the definition of an interface. <filename>'.itf'</filename>
            files follow the same naming scheme as <filename>'.adl'</filename> files.
            That is, the definition of the interface <classname>foo.bar.Itf1</classname> 
            must be located in a file called <filename>foo/bar/Itf1.itf</filename>.
            An <filename>'.itf'</filename> file may also contain type and constant definitions.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>'.idt'</filename> file</term>
        <listitem>
          <para>Contains only type and constant definitions. <filename>'.idt'</filename> files are 
            useful to define types and constants that are used by different interfaces.</para>
        </listitem>
      </varlistentry>
    </variablelist>

  <section id="idl-type">
    <title>Type definition</title>
    
    <para>The IDL language supports the same type definition constructs as the C language, 
      except function pointers. That is, an IDL file (either a <filename>'.itf'</filename> or <filename>'.idt'</filename> file)
      can define <code>struct</code>, <code>union</code>, <code>enum</code> or 
      <code>typedef</code> using the same syntax as the C language.</para>
    
  </section>
  
  <section>
    <title>Constant definition</title>
    
    <para>The IDL language allows to define constant values using a <code>"#define"</code>
      construct which is similar to the  C preprocessor directive used for macro definitions.
      Note that, function-like macros are not allowed.</para>
  </section>
  
  <section>
    <title>Interface definition</title>
    
    <para>Interfaces can only be defined in <filename>'.itf'</filename> files. Moreover,
      similarly to ADL files, an <filename>'.itf'</filename> file must contain one and only
      one interface definition whose <glossterm linkend="FQN">fully-qualified-name</glossterm>
      matches the path of the file. (interface <classname>foo.bar.Itf1</classname>
      must be located in a file called <filename>foo/bar/Itf1.itf</filename>).</para>
    
    <para>An interface is defined by the <code>"interface"</code> keyword followed by the
      fully-qualified-name of the interface and the list of methods inside curly braces
      (<code>"{"</code> and "}"). Method definitions are similar to traditional C function prototypes.</para>
    
    <example>
      <title>Interface definition</title>
      
      <programlisting language="idl" linenumbering="numbered"> interface foo.bar.Itf1 {
   int meth1(int a, int b);
   char meth2(struct s *s_ptr);
 }</programlisting>
      <para>
        In the above code excerpt: 
        <itemizedlist>
          <listitem>
            <para>Line 1 defines the interface <classname>foo.bar.Itf1</classname>.</para>
          </listitem>
          <listitem>
            <para>Line 2 defines a method called <varname>meth1</varname> that 
              takes two integers as parameter and return an integer.</para>
          </listitem>
          <listitem>
            <para>Line 3 defines a method called <varname>meth2</varname> that takes a pointer
            to a <code>struct</code> as parameter and returns a character.</para>
          </listitem>
        </itemizedlist>
      </para>
    </example>
    
    <para>Every methods in a given interface must have a unique name.</para>

    <section id="idl-vaArgsMeth">
    <title>Variadic methods</title>
 	<para>
	An interface may be defined using variadic methods. In this case the
	interface must also define the dual method (e.g. vprintf is the dual
	function of printf in stdio). Moreover the method must be specified
	using the
	<varname>@VarArgsDual</varname>
	annotation (see
	<xref linkend="idl-annot-varargsdual" />
	).</para>
	
    <example>
    <title>Variadic methods</title>
    <programlisting language="idl" linenumbering="numbered">interface foo.bar.Itf1 {
  @VarArgsDual(meth2)
  int meth1(char * my_sting, ...);
  char meth2(char * my_sting, va_list args);
}
     </programlisting>
    </example>
	   
    </section>
  <section id="idl-inheritance">
    <title>Interface inheritance</title>
    <para>An interface definition may extend another interface definition. 
      The name of the extended interface is specified after a dash symbol (<code>":"</code>)
      just after the name of the interface. Methods defined in the extended interface
      are inherited and cannot be overridden.</para>
    
    <example>
      <title>Interface inheritance</title>
      <para>Given the following definitions :</para>
      <programlisting language="idl" linenumbering="numbered"> interface foo.bar.Itf1 {
   int meth1(int a, int b);
   char meth2(struct s *s_ptr);
 }
 </programlisting>
      <programlisting language="idl" linenumbering="numbered" startinglinenumber="10"> interface foo.bar.Itf2 : foo.bar.Itf1 {
   int meth3(int size, int tab[]);
 }
 </programlisting>
      <para>The previous definition is equivalent to : </para>
      <programlisting language="idl" linenumbering="numbered" startinglinenumber="20"> interface foo.bar.Itf2 {
   int meth1(int a, int b);
   char meth2(struct s *s_ptr);
   int meth3(int size, int tab[]);
 }
 </programlisting>
      <para>
        In the above code excerpt: 
          <itemizedlist>
            <listitem>
              <para>Line 10 specifies that the interface <classname>foo.bar.Itf2</classname>
                extends the interface <classname>foo.bar.Itf1</classname>.</para>
            </listitem>
          </itemizedlist>
        </para>
    </example>
  </section> 
  </section>  
  
  <!--#########################################################################-->
<!-- Annotation                                                              -->
<!--#########################################################################-->
  
  <section id="idl-annot">
    <title>IDL Annotations</title>
              
      <section id="idl-annot-varargsdual">
        <title><classname>@VarArgsDual</classname></title>
        
        <formalpara>
          <title>Annotation fields</title>
          <para>One field called <varname>value</varname> of type <varname>string</varname></para>
        </formalpara>
        
        <formalpara>
          <title>Annotation targets</title>
          <para>
            <simplelist type="inline">
              <member>Method</member>
            </simplelist>
          </para>
        </formalpara>

        <para>The <classname>VarArgsDual</classname> annotation is needed to specify 
          the name of the dual method of a variadic method. A variadic
          method is a method with a variable number of arguments. Its dual 
          method generally has only two arguments, the first being the same as 
          the original method and the second being a list (<varname>va_list</varname>)
          gathering every other arguments.</para>

      </section>
      
      <section id="idl-annot-importIDL">
        <title><classname>@ImportIDL</classname></title>
        
        <formalpara>
          <title>Annotation fields</title>
          <para>One field called <varname>value</varname> of type <varname>string[]</varname></para>
        </formalpara>
        
        <formalpara>
          <title>Annotation targets</title>
          <para>
            <simplelist type="inline">
              <member>Interface definition</member>
            </simplelist>
          </para>
        </formalpara>

        <para>The <classname>ImportIDL</classname> annotation allows specifying
          other IDL interfaces signatures to be available in the interface body in
          methods definitions.</para>

		<para>This is particularly useful for reconfiguration cases where components
		transfer interface pointers from one another.</para>
		
		<para>For example, if component A obtains an interface pointer (that it owns, as is
		usually the case for callbacks, or from another component C) and transfers
		it to component B that will use it, it will have to transfer the interface pointer 
		through an interface as a method argument, for B to use it with CALL_PTR or BIND_MY_INTERFACE.
		This used to be done using a void* type, which is not the most elegant way to do it.
		</para>
		
		<para>
		Using @ImportIDL, the imported types are made available to be used as explicit methods
		arguments types	or methods return types.
		This avoids using void*, improves compiler checks, and may reduce warnings with some compilers.
		</para>

		<example>
		<title>ImportIDL for arguments</title>
		<programlisting linenumbering="numbered" language="idl"> @ImportIDL({"importidl.TargetService"})
 interface importidl.RelayService {
   int relayInterfacePointer(importidl_TargetService itf);
 }
		</programlisting>
		</example>
		
		<example>
		<title>ImportIDL for return type</title>
		<programlisting linenumbering="numbered" language="idl"> @ImportIDL({"importidl.TargetService"})
 interface importidl.InterfaceTransfer {
   importidl_TargetService getTargetServiceInterface();
 }
		</programlisting>
		</example>

		<note><para>When importing types, you must use the { } curly brackets to list signatures
		(separated by commas ',') even if there's only one.</para>
		<para>Also replace the dots '.' from imported signature with underscores '_' in the
		arguments and return types.</para></note>
		<note><para>This annotation is similar to <varname>@UseIDL</varname> (see <xref linkend="adl-annot-useIDL"/>),
		and makes the imported types available in the component implementation as well, which
		is useful for the concerned interface methods implementation.
		</para></note>

      </section>
      
  </section>
  
  
</section>
