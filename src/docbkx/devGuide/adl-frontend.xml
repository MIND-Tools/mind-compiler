<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../dtd/minddoc.dtd" [
<!ENTITY % myents SYSTEM "../shared.ent" >
%myents;
]>
<chapter id="adlfe">
  <title>ADL Frontend</title>

  <section id="adlfe-ovarch">
    <title>Overall architecture</title>

    <para>The architecture of the ADL frontend is inspired by <application>FractalADL</application>.
      The main role of the ADL frontend is to parse ADL input files, check them and build an 
      intermediate representation (<abbrev>aka</abbrev>. <acronym>AST</acronym>). The 
      frontend is organized as a <emphasis>chain of delegating loader components</emphasis>.
      Each loader is responsible for the verification and the enhancement for a dedicated 
      aspect of the language (checking of bindings, template instantiation, resolution of 
      extended definitions, ...). A loader component may use a <emphasis>sub-chain</emphasis>
      for the resolution of complex tasks in which multiple language aspects are involved 
      (resolution of definition references for instance).</para>

    <para>The following schema presents the global architecture of the ADL frontend.</para>

    <figure id="adlfe-ovarch-fig">
      <title>ADL frontend global architecture</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="images/ADLLoader.svg"  scale="30" align="center"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="images/ADLLoader.png" align="center"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section id="adlfe-loader">
    <title>Loader chain</title>

    <para>Each loader component provides a <codelink class="&fadlPkg;.Loader" jdocurl="&fadlJdoc;" />
      interface and requires an interface of the same kind. Its implementation is similar to :
    </para>
    <example>
      <title>
        Typical implementation of a
        loader component</title>
      <programlisting language="java">public class <replaceable>ALoaderComponent</replaceable> extends <codelink class="&mindPkg;.AbstractDelegatingLoader" jdocurl="&mindJdoc;"/> {
  
  // implementation of the Loader interface.
  public <codelink class="&fadlPkg;.Definition" jdocurl="&fadlJdoc;" /> load(String name, Map&lt;Object, Object&gt; context) 
        throws ADLException {
    <codelink class="&fadlPkg;.Definition" jdocurl="&fadlJdoc;" /> d = clientLoader.load(name, context);
    processDefinition(d);
    return d;
  }
  
  protected void processDefinition(<codelink class="&fadlPkg;.Definition" jdocurl="&fadlJdoc;" /> d) 
        throws ADLException {
    //process the definition...
  }
}</programlisting>
    </example>
    <para>The <codelink class="&fadlPkg;.AbstractDelegatingLoader" jdocurl="&fadlJdoc;"/>
      class defines the <function>clientLoader</function> client interface that
      is bound to the next loader component in the delegation chain.</para>

    <para>
      Most important Loader components are :
    </para>
    <variablelist>
      <varlistentry>
        <term><codelink class="&mindPkg;.adl.parser.ADLParser" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> </term>
        <listitem><para>
          This loader component in the last loader in the chain. It is 
          responsible to parser the ADL input files and create the initial AST
          structure that represent the input file.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><codelink class="&mindPkg;.adl.CacheLoader" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> </term>
        <listitem><para>
          This loader component is the first loader in the chain. It manages a
          cache of already loaded ADLs to avoid to execute the loader 
          chain several times for the same ADL input file. This loader is also 
          responsible to check that an ADL do not reference itself directly or
          transitively.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><codelink class="&mindPkg;.adl.ExtendsLoader" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> </term>
        <listitem><para>
          This loader is responsible to merge a definition with the definitions
          it extends. So loader components located between the <classname>CacheLoader</classname>
          and this loader in the loader chain, work on an AST where inheritance is resolved (i.e.
          inherited elements are present in the AST); whereas loader component 
          that are between this loader and the <classname>ADLParser</classname>,
          work only the elements that are actually
          declared in the ADL input file (and not on the inherited elements).
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><codelink class="&mindPkg;.adl.idl.InterfaceSignatureLoader" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> </term>
        <listitem><para>
          This loader loads the signature of the interfaces that are described
          in the ADL. This loader component is the bridge between the ADL 
          frontend and the IDL frontend.
        </para></listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="adlfe-ast">
    <title>ADL AST structure</title>
    
    <para>ADL AST is structured as a graph of nodes where each node implements a set
      of interfaces. A given AST node implements different interfaces corresponding to 
      different aspect of the ADL language. See <xref linkend="fadl-ast"/> for details
      on the FractalADL AST framework.</para>
    
    <section id="adlfe-ast-arch">
      <title>Structure of architectural aspect of ADL</title>
      <para>The following schema gives an overview of
        the AST interfaces corresponding to architectural elements (definition, 
        sub-components, bindings, attributes etc.):</para>
      
      <figure id="adlfe-ovast-fig">
        <title>AST structure for architectural elements </title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/ASTOverview.svg"  scale="30" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="images/ASTOverview.png" align="center"/>
          </imageobject>
          <caption>
            <blockquote>
              <para>(1) Interfaces defined in <application>FractalADL</application>. (2) See <xref linkend="comfe-valuesast-fig" />.</para>
            </blockquote>
          </caption>
        </mediaobject>
      </figure>
      
      <para>The root AST node corresponding to an input ADL file is a 
        <codelink class="&mindPkg;.adl.ast.MindDefinition" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
        A <classname>MindDefinition</classname> extends the generic 
        <codelink class="&fadlPkg;.Definition" jdocurl="&fadlJdoc;" /> interface from
        <application>FractalADL</application>. It has a name and may contains a set 
        of referenced definitions corresponding to the definition this ADL extends.</para>
      <para>Depending on the kind of definition contained in the ADL input file (type, primitive 
        or composite), the root node also implements different container interfaces corresponding
        to sub-nodes that can be contained for each definition kind.</para>
    </section>
    
    <section>
      <title>AST structure for parametric ADL</title>
      <para>The following schema details the AST interfaces corresponding
        to the support for parametric ADL:</para>
      <figure id="adlfe-astparam-fig">
        <title>AST structure for parametric ADL aspect </title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/ASTParameter.svg"  scale="30" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="images/ASTParameter.png" align="center"/>
          </imageobject>
          <caption>
            <blockquote>
              <para>(1) See <xref linkend="adlfe-ovast-fig"/>. (2) See <xref linkend="comfe-valuesast-fig" />.</para>
            </blockquote>
          </caption>
        </mediaobject>
      </figure>
      
      <para>A <codelink class="&mindPkg;.adl.parameter.ast.FormalParameter" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> 
        corresponds to the declaration of a ADL parameter, while an 
        <codelink class="&mindPkg;.adl.parameter.ast.Argument" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> 
        corresponds to the value given to a parameter in a reference to another ADL.</para>
    </section>
    
    <section>
      <title>AST structure for generic ADL</title>
      <para>The following schema details the AST interfaces for the support of generic ADL:</para>

      <figure id="adlfe-astgeneric-fig">
        <title>AST structure for generic ADL aspect </title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/ASTGeneric.svg"  scale="30" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="images/ASTGeneric.png" align="center"/>
          </imageobject>
          <caption>
            <blockquote>
              <para>(1) See <xref linkend="adlfe-ovast-fig"/>.</para>
            </blockquote>
          </caption>
        </mediaobject>
      </figure>
      <para>A <codelink class="&mindPkg;.adl.generic.ast.FormalTypeParameter" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> 
        corresponds to the declaration of a type parameter in a definition of a composite ADL. 
        This formal type parameter contains a definition references that corresponds to the type definition 
        to which the type parameter must be conform. 
        A <codelink class="&mindPkg;.adl.generic.ast.TypeArgument" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
        corresponds to the value given to a type parameter in a reference to a generic ADL. This value can have 
        two different kinds: it can be a reference to an another ADL or a reference to the formal type parameter
        of the current ADL.</para>
    </section>
    
    <section>
      <title>AST structure for anonymous definitions</title>
      <para>The following schema details the AST interfaces for the support of anonymous ADL:</para>
      <figure id="adlfe-astanonym-fig">
        <title>AST structure for anonymous definitions</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/ASTAnonymous.svg"  scale="30" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="images/ASTAnonymous.png" align="center"/>
          </imageobject>
          <caption>
            <blockquote>
              <para>(1) See <xref linkend="adlfe-ovast-fig"/>.</para>
            </blockquote>
          </caption>
        </mediaobject>
      </figure>
      
      <para>A node corresponding to a sub-component may contain an anonymous definition.
        Two different nodes represents anonymous definitions of primitive component and
        anonymous definitions of composite component.</para>
    </section>
    
    <section>
      <title>AST structure for the support of import</title>
      <para>The following schema details the AST interfaces for the support of import in ADL:</para>
      <figure id="adlfe-astimport-fig">
        <title>AST structure for import support</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/ASTImport.svg"  scale="30" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="images/ASTImport.png" align="center"/>
          </imageobject>
          <caption>
            <blockquote>
              <para>(1) See <xref linkend="adlfe-ovast-fig"/>.</para>
            </blockquote>
          </caption>
        </mediaobject>
      </figure>
    </section>
    
    <section>
      <title>AST Structure for the support of annotations</title>
      <para>The following schema details the AST interfaces for the support of annotations in ADL:</para>
      <figure id="adlfe-astannot-fig">
        <title>AST structure for annotation support</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/ASTADLAnnotation.svg"  scale="30" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="images/ASTADLAnnotation.png" align="center"/>
          </imageobject>
          <caption>
            <blockquote>
              <para>(1) See <xref linkend="adlfe-ovast-fig"/>. (2) See <xref linkend="adlfe-astanonym-fig"/>. 
                (3) See <xref linkend="adlfe-astimport-fig"/>.(4) See <xref linkend="comfe-anno"/>.</para>
            </blockquote>
          </caption>
        </mediaobject>
      </figure>
    </section>
  </section>
  <section id="adlfe-defref">
    <title>Definition Reference Resolver sub-chain</title>
    
    <para>The definition reference resolved sub-chain is responsible to find the 
      <codelink class="&fadlPkg;.Definition" jdocurl="&fadlJdoc;" /> corresponding to 
      a given <codelink class="&mindPkg;.adl.ast.DefinitionReference" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>.</para>
    <para>The last component in the definition reference resolver delegation chain is the
      <codelink class="&mindPkg;.adl.BasicDefinitionReferenceResolver" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>. 
      This component simply uses the main loader chain to retrieve the ADL definition whose name 
      corresponds to the name contained in the definition reference. Other components in the chain
      are responsible to check that the definition reference is correct regarding the actual definition.
      In particular the <codelink class="&mindPkg;.adl.parameter.ParametricDefinitionReferenceResolver" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      component checks that the arguments contained by the definition reference matches formal parameters 
      declared by the definition.</para>
    <para>Similarly, the <codelink class="&mindPkg;.adl.generic.GenericDefinitionReferenceResolver" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      component checks values given to formal type parameters of a generic definition. Moreover this component delegates 
      the creation of a unique template instance to the template instantiation sub-chain (see <xref linkend="adlfe-tmpl"/>
      for more details concerning template instantiation).</para>
    <para>The <codelink class="&mindPkg;.adl.parameter.ParametricGenericDefinitionReferenceResolver" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      handles definition references that contains both type arguments and arguments. For instance this component transforms 
      <code>D1&lt;P1(10, 11), P2(&quot;foo&quot;)&gt;</code> to <code>D1&lt;P1, P2&gt;(10, 11, &quot;foo&quot;)</code>.</para>
    <para>The <codelink class="&mindPkg;.adl.imports.ImportDefinitionReferenceResolver" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      scans import statements to transform the simple name contained in the definition reference into a fully-qualified name.</para>
    <para>Finally the <codelink class="&mindPkg;.adl.CachingDefinitionReferenceResolver" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      stores the resolved definition corresponding to given definition reference into an AST decoration attached to the definition 
      reference. This avoid to re-execute the whole definition reference resolver sub-chain for the same definition reference.</para>
  </section>

  <section id="adlfe-tmpl">
    <title>Template instantiation sub-chain</title>
    
    <para>The template instantiation sub-chain is responsible to create a new AST graph corresponding to an 
      instantiation of a generic definition with given values of type parameters. For instance considering the
      following generic definition:</para>
    <programlisting language="adl">composite D1&lt;T conformsto T1, U conformsto T2&gt; {
  ...
  contains T as subComp1;
  contains U as subComp2;
  ...
}</programlisting>
    <para>And the given definition reference:</para>
    <programlisting language="adl">D1&lt;P1, P2&gt;</programlisting>
    <para>The template instantiation sub-chain is responsible to return the AST corresponding to the following ADL:</para>
    <programlisting language="adl">composite D1&lt;P1, P2&gt; {
  ...
  contains P1 as subComp1;
  contains P2 as subComp2;
  ...
}</programlisting>
    <para>The previous example is a simple use case. The template instantiation sub-chain must support 
      more complex instantiation schemes like recursive instantiations: <code>D1&lt;P1, D1&lt;P1, P2&gt;&gt;</code>
      or partial instantiations: <code>D1&lt;P1, U&gt;</code> where <varname>U</varname> is a formal type parameter of 
      the enclosing definition.</para>
    <para>Moreover, the template instantiation sub-chain must ensure that a given template is instantiated at most once 
     for a given combination of type parameters. To do so, a unique name is given to each template instance that 
     identifies the values of the type parameters.</para>
    <para>Finally, the template instantiation sub-chain handles the case where type argument values are parametric 
      definitions. In this case, the formal parameters of definition referenced in the type argument value are re-exported
      as formal parameters of the template instance. As an example considering the following parametric definitions:</para>
    <programlisting language="adl">primitive P1(a, b) {
  ...
}

primitive P2(c) {
  ...
}</programlisting>
    <para>Then the template instantiation corresponding to the following definition reference 
      <code>D1&lt;P1(10, 11), P2(&quot;foo&quot;)&gt;</code> must returns an AST corresponding to the 
      following ADL:</para>
    <programlisting language="adl">composite D1&lt;P1, P2&gt;(T_a, T_b, U_c) {
  ...
  contains P1(T_a, T_b) as subComp1;
  contains P2(U_c) as subComp2;
  ...
}</programlisting>
    <para>This ensures that the template instance does not depends on particular values of the 
      formal parameters (i.e. the same template instance can be used with different argument values).</para>
  </section>
  
  <section id="adlfe-anonym">
    <title>Anonymous definition extraction sub-chain</title>
    <para>The anonymous definition extraction sub-chain is responsible to extract anonymous definition contained by
      <classname>component</classname> nodes and transforms it in fully formed definition. To do so, a unique name
      is given to the anonymous definition (of the form <classname><replaceable>&lt;enclosing definition name&gt;</replaceable>$<replaceable>&lt;index&gt;</replaceable></classname>).
      In addition, if the anonymous definition references formal parameter or formal type parameters of the enclosing definition,
      these parameters are declared as formal parameters of the extracted definition, and the enclosing definition
      is updated accordingly. For instance considering the following definition:</para>
    <programlisting language="adl">composite D1&lt;T conformsto T1, U conformsto T2&gt;(a, b) {
  ...
  contains as subComp1 primitive {
    ...
    attribute int attr1 = a;
    attribute int attr2 = b;
  }
  
  contains as subComp2 composite {
    ...
    contains T as subSubComp1;
    contains U as subSubComp2;
  }
}</programlisting>
    <para>The anonymous definition extraction sub-chain splits it into the three following definitions:</para>
    <programlisting language="adl">composite D1&lt;T conformsto T1, U conformsto T2&gt;(a, b) {
  ...
  contains D1$0(a, b) as subComp1;
  contains D1$1&lt;T, U&gt; as subComp2;
}

primitive D1$0(a, b) {
  ...
  attribute int attr1 = a;
  attribute int attr2 = b;
}

composite D1$1&lt;T conformsto T1, U conformsto T2&gt; {
  ...
  contains T as subSubComp1;
  contains U as subSubComp2;
}
</programlisting>
  </section>
  
  <section id="adlfe-error">
    <title>Error reporting in the ADL frontend</title>
    <para>When an error is detected in the ADL frontend, it is reported to the 
    <codelink class="&mindPkg;.error.ErrorManager" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
    service (see <xref linkend="comfs-srv-error"/>). When a definition reference cannot be resolved
    to an existing definition, the <codelink class="&mindPkg;.adl.BasicDefinitionReferenceResolver" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
    component logs the error and return an <emphasis>unresolved definition AST node</emphasis>. Loader components can test
    if a definition is an unresolved definition AST node using the <methodname>isUnresolvedDefinitionNode</methodname> method of the
    <codelink class="&mindPkg;.adl.ast.ASTHelper" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> class.
    </para>
    
  </section>

  <section id="adlfe-binadl">
    <title>Serialization of AST and incremental ADL loading</title>
    <para>To improve toolchain performances, the <codelink class="&mindPkg;.adl.BinaryADLLoader" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      component tries to load ADL definitions from files containing a serialization of the AST that have been produced by a previous execution of 
      the toolchain. If the binary file is found, the <classname>BynaryADLLoader</classname> deserializes the AST and checks if it is up-to-date
      by checking the timestamps of all the input resources (see <xref linkend="comfe-srv-inputrsc"/>) attached to the AST.</para>
  </section>

  <section id="adlfe-annot">
    <title>Support for annotations in ADL</title>
    <para>Annotations founds in ADL files are checked and resolved to an 
      <codelink class="&mindPkg;.annotation.Annotation" jdocurl="&mindJdoc;" codeurl="&mindCode;"/> object by the
      <codelink class="&mindPkg;.annotation.AnnotationChecker" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      service (see <xref linkend="comfe-anno"/>). Annotation processors classes can be associated to 
      annotations. An annotation processor class that must be executed during the ADL loading must implements
      the <codelink class="&mindPkg;.adl.annotation.ADLLoaderAnnotationProcessor" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      interface. Annotation processors can be executed at different phases of the ADL Loading. For each of these phases, the 
      ADL loader chain contains, at a different place, an <codelink class="&mindPkg;.adl.annotation.AnnotationProcessorLoader" jdocurl="&mindJdoc;" codeurl="&mindCode;"/>
      component.</para>
    <para>See TODO for details on how to add new ADL annotations and write associated processors.</para>
  </section>
</chapter>
