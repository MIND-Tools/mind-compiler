@Singleton
primitive singleton.A extends ApplicationType {
  
  requires Bservice as b;
  
  data{{
    struct{
      int intA;
    } PRIVATE;
  }}
  
  source {{
    #include <stdio.h>
    #include <string.h>
    
    
    int METH(main, main)(int argc, char **argv) {
      
      intptr_t b_ptr = CALL(b, getPrivate)();
      
      if (b_ptr == (intptr_t) &PRIVATE.intA) {
        printf("Invalid PRIVATE structure, variables are shared between two components.\n");
        return 1;
      }
      return 0;
    }
  }};
}