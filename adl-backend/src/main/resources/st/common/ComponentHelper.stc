template st.common.ComponentHelper {

$${
isClient ::= [ "client" : "true" ]
isServer ::= [ "server" : "true" ]
isCollection ::= [ "collection" : "true" ]
isThis ::= [ "this" : "true" ]

InterfaceType(signature) ::= <<
<signature;format="toCName">
>>

InterfaceDescType(signature) ::= <<
struct __component_<signature;format="toCName">_itf_desc
>>

InterfaceVTableType(signature) ::= <<
struct __component_<signature; format="toCName">_vTable
>>

ComponentTypeName(definitionName) ::= <<
__component_<definitionName;format="toCName">_t
>>

vTableInstanceName(definition, itf, index) ::= <<
__component_<definition.name; format="toCName">_<itf.name><if (index)>_<index><endif>_VTable
>>

AttributeValue(value) ::= <<
<(AttributeValueTemplateMap.(value.astDecorations.kind))(value)>
>>

AttributeValueTemplateMap ::= [
  "string"    : "LiteralValue",
  "number"    : "LiteralValue",
  "reference" : "ReferenceValue",
  "null"      : "NullValue",
  "compound"  : "CompoundValue"
]

LiteralValue(value) ::= <<
<value.value>
>>

ReferenceValue(value) ::= <<
<value.ref;format="toCName">
>>

NullValue(value) ::= <<
NULL
>>

CompoundValue(value) ::= <<
{<value.compoundValueFields:{<if (it.name)>.<it.name>=<endif><AttributeValue(value=it.value)>}; separator=", ">}
>>

isCompoundValue ::= [ "compound" : "true" ]

}$$

}