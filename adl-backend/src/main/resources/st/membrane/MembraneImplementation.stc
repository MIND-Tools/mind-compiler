template st.membrane.MembraneImplementation
  : st.common.ComponentHelper
  implements st.definitions.implementations.ComponentDefinition {

st.interfaces.IDLDefinition idl2c = st.interfaces.IDL2C;
st.membrane.ControllerGenerator ctrlGenerator = plugin(st.membrane);

$${

ComponentDefinition(definition, interfaceDefinitions) ::= <<
/* Generated file: <definition.name;format="nameToPath">_ctrl_impl.c */

#include "<definition.name;format="nameToPath">.inc"

<if (definition.astNodeTypes.("source"))>
<if (definition.sources)>
#include "<definition.name;format="nameToPath">_impl.h"
<endif>
<endif>

<ComponentFactoryMethod(definition=definition)>

<if (definition.astNodeTypes.("controller"))>
/* Start implementation of controllers */

<definition.controllers:ControllerImpl(definition=definition, controller=it, interfaceDefinitions=interfaceDefinitions)>

/* End implementation of controllers */
<endif>

<ServerInterfaceStubs(definition=definition, interfaceDefinitions=interfaceDefinitions)>

<ComponentVTableInit(definition=definition, interfaceDefinitions=interfaceDefinitions)>

>>

ControllerImpl(definition, controller, interfaceDefinitions) ::= <<
<controller.sources:{<(ctrlGenerator.(it.path).ControllerImplementation)(definition=definition, controller=controller, interfaceDefinitions=interfaceDefinitions)>}>
>>

METHODName(itfName, index, methodName) ::= <<
<if (index)>
INTERFACE_COLLECTION_METHOD(<itfName>, <index>, <methodName>)
<else>
INTERFACE_METHOD(<itfName>, <methodName>)
<endif>
>>

StubName(definition, itfName, index, methodName) ::= <<
__component_<definition.name;format="toCName">_<itfName><if (index)>_<index><endif>_<methodName>_stub
>>


// -----------------------------------------------------------------------------
// Component Factory methods

ComponentFactoryMethod(definition) ::= <<

#include "memory/api/Allocator.itf.h"

#ifdef CONSTRUCTOR_METHOD_IMPLEMENTED
void __component_<definition.name;format="toCName">_constructor(PRIVATE_DATA_T* instance);
#endif

__MIND_ATTRIBUTE_UNUSED
static __MIND_INLINE void __component_<definition.name;format="toCName">_cpy(void * dest, void *src, int size) {
	int i;
	for (i = 0; i \< size; i++) {
		((char *) dest)[i] = ((char *) src)[i];
	}
}


int __component_<definition.name;format="toCName">_factory(void **instance, void *allocItf <ComponentFactoryParameters(definition=definition)>) {
  int err = 0;
  <DeclareComplexAttributeValues(definition=definition)>

  PRIVATE_DATA_T* newInstance = (PRIVATE_DATA_T*) CALL_PTR((memory_api_Allocator) allocItf, alloc)(sizeof(PRIVATE_DATA_T));
  if (newInstance == NULL) return -1;
  
  <InitializeInterfaces(definition=definition)>
  
  <InitializeComponents(definition=definition)>
  
  <InitializeBindings(definition=definition)>

  <InitializeAttributes(definition=definition)>

  <InitializeControllersData(definition=definition)>
  
#ifdef CONSTRUCTOR_METHOD_IMPLEMENTED
  __component_<definition.name;format="toCName">_constructor(newInstance);
#endif
  
  if (err != 0)
    goto error0;
  
  *instance = newInstance;
  return 0;

error0:
  <ClearControllersData(definition=definition)>

  <ClearComponents(definition=definition)>

  CALL_PTR((memory_api_Allocator) allocItf, free)(newInstance);
  return err;
}

#ifdef DESTRUCTOR_METHOD_IMPLEMENTED
void __component_<definition.name;format="toCName">_destructor(PRIVATE_DATA_T* instance);
#endif


int __component_<definition.name;format="toCName">_destroy(void *instance, void *allocItf) {
<if (definition.astNodeTypes.("component"))>
<if (definition.components)>
  int err = 0;
<endif>
<endif>

  PRIVATE_DATA_T* destroyInstance = (PRIVATE_DATA_T*) instance;

#ifdef DESTRUCTOR_METHOD_IMPLEMENTED
  __component_<definition.name;format="toCName">_destructor(destroyInstance);
#endif

  <DestroyComponents(definition=definition)>

  <DestroyControllersData(definition=definition)>

  CALL_PTR((memory_api_Allocator) allocItf, free)(destroyInstance);
  return 0;

<if (definition.astNodeTypes.("component"))>
<if (definition.components)>
error0:
  return err;
<endif>
<endif>
}

>>

ComponentFactoryParameters(definition) ::= <<
<if (definition.astNodeTypes.("formalParameter"))>
<definition.formalParameters:ComponentFactoryParameter(definition=definition, parameter=it)>
<endif>
>>

ComponentFactoryParameter(definition, parameter) ::= <<
, 
<if (parameter.astDecorations.("inferred-type"))>
<parameter.astDecorations.("inferred-type").cType> <parameter.name;format="toCName">
<else>
int <parameter.name;format="toCName">
<endif>
>>

InitializeInterfaces(definition) ::= <<
<definition.interfaces:InitializeInterface(definition=definition, itf=it)>
<if (definition.astNodeTypes.("internalInterface"))>
<definition.internalInterfaces:InitializeInterface(definition=definition, itf=it, isInternal="true")>
<endif>
>>

InitializeInterface(definition, itf, isInternal) ::= <<
<if(isClient.(it.role))>
<InitializeClientInterface(definition=definition, itf=it, isInternal=isInternal)>
<else>
<InitializeServerInterface(definition=definition, itf=it, isInternal=isInternal)>
<endif>
>>

InitializeClientInterface(definition, itf, isInternal) ::= <<
>>

InitializeServerInterface(definition, itf, isInternal) ::= <<
/* initialization of <itf.name> <if (isInternal)>internal<else>external<endif> server interface */
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):InitializeServerInterface1(definition=definition, itf=itf, index=it, isInternal=isInternal);separator="\n">
<else>
<InitializeServerInterface1(definition=definition, itf=itf, isInternal=isInternal)>
<endif>

>>

InitializeServerInterface1(definition, itf, index, isInternal) ::= <<
newInstance->__component_internal_data.<if (isInternal)>inner_type<else>type<endif>.<itf.name><if (index)>[<index>]<endif>.selfData = newInstance;
newInstance->__component_internal_data.<if (isInternal)>inner_type<else>type<endif>.<itf.name><if (index)>[<index>]<endif>.meths = &<vTableInstanceName(definition=definition,itf=itf,index=index)>;
newInstance->__component_internal_data.<if (isInternal)>inner_type<else>type<endif>.<itf.name><if (index)>[<index>]<endif>.isBound = newInstance;
>>



InitializeComponents(definition) ::= <<
<if (definition.astNodeTypes.("component"))>
<definition.components:InitializeComponent(definition=definition, component=it)>
<endif>
>>

InitializeComponent(definition, component) ::= <<
  /* initialization of <component.name> sub-component */
  {
    void *<component.name>;
    err = __component_<component.definitionReference.name;format="toCName">_factory(
      &<component.name>, 
      allocItf <InitializeComponentParameters(definition=definition, component=component)>);
    if (err != 0) goto error_<component.name>;
    newInstance->__component_internal_data.components.<component.name> = (__component_<component.definitionReference.name;format="toCName">_t *)<component.name>;
  }
>>

InitializeComponentParameters(definition, component) ::= <<
<if (component.definitionReference.astNodeTypes.("argument"))>
<component.definitionReference.arguments:InitializeComponentParameter(definition=definition, component=component, argument=it)>
<endif>
>>

InitializeComponentParameter(definition, component, argument) ::= <<
, <if (argument.value.astAttributes.("ref"))>
  <argument.value.ref;format="toCName">
<elseif (argument.value.astAttributes.("value"))>
  <argument.value.value>
<else>
  NULL
<endif>
>>

ClearComponents(definition) ::= <<
<if (definition.astNodeTypes.("component"))>
<ClearComponentsRevers(definition=definition, components=definition.components)>
<endif>
>>

ClearComponentsRevers(definition, components) ::= <<
<if (components)>
<ClearComponentsRevers(definition=definition, components=rest(components))>
<ClearComponent(definition=definition, component=first(components))>
<endif>
>>

ClearComponent(definition, component) ::= <<
/* destroy <component.name> sub-component */
__component_<component.definitionReference.name;format="toCName">_destroy(newInstance->__component_internal_data.components.<component.name>, allocItf);

error_<component.name> :
>>


InitializeBindings(definition) ::= <<
<if (definition.astNodeTypes.("binding"))>
<definition.bindings:InitializeBinding(definition=definition, binding=it);separator="\n\n">
<endif>
>>

InitializeBinding(definition, binding) ::= <<
  /* initialize binding from <binding.fromComponent>.<binding.fromInterface><if(binding.fromInterfaceNumber)>[<binding.fromInterfaceNumber>]<endif> to <binding.toComponent>.<binding.toInterface><if(binding.toInterfaceNumber)>[<binding.toInterfaceNumber>]<endif> */
  newInstance->__component_internal_data.<FromItfContainer(binding=binding)>.<binding.fromInterface><if(binding.fromInterfaceNumber)>[<binding.fromInterfaceNumber>]<endif> = 
    <BindingCastIfNeeded(binding=binding)>& newInstance->__component_internal_data.<ToItfContainer(binding=binding)>.<binding.toInterface><if(binding.toInterfaceNumber)>[<binding.toInterfaceNumber>]<endif>;
>>

BindingCastIfNeeded(binding) ::= << <if (binding.astDecorations.("type-inheritance-cast"))>(<binding.astDecorations.("type-inheritance-cast"); format="toCName">)<endif> >>

FromItfContainer(binding) ::= <<
<if (isThis.(binding.fromComponent))>
<if (binding.astDecorations.("from-composite-controller"))>
type
<else>
inner_type
<endif>
<else>
components.<binding.fromComponent>->__component_internal_data.type
<endif>
>>

ToItfContainer(binding) ::= <<
<if (isThis.(binding.toComponent))>
<if (binding.astDecorations.("to-composite-controller"))>
type
<else>
inner_type
<endif>
<else>
components.<binding.toComponent>->__component_internal_data.type
<endif>
>>


DeclareComplexAttributeValues(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))>
<definition.attributes:DeclareComplexAttributeValue(definition=definition, attribute=it);separator="\n\n">
<endif>
>>

DeclareComplexAttributeValue(definition, attribute) ::= <<
<if (attribute.value)>
<if (isCompoundValue.(attribute.value.astDecorations.kind))>
<attribute.type> __component_<definition.name;format="toCName">_attr_<attribute.name> = <AttributeValue(value=attribute.value)>;
<endif>
<endif>
>>

InitializeAttributes(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))>
<definition.attributes:InitializeAttribute(definition=definition, attribute=it);separator="\n\n">
<endif>
>>

InitializeAttribute(definition, attribute) ::= <<
<if (attribute.value)>
<if (isCompoundValue.(attribute.value.astDecorations.kind))>
__component_<definition.name;format="toCName">_cpy(&(newInstance->__component_internal_data.attributes.<attribute.name>), &__component_<definition.name;format="toCName">_attr_<attribute.name>, sizeof(__component_<definition.name;format="toCName">_attr_<attribute.name>))
<else>
newInstance->__component_internal_data.attributes.<attribute.name> = <AttributeValue(value=attribute.value)>
<endif>
;
<endif>
>>

InitializeControllersData(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:InitializeControllerData(definition=definition, controller=it)>
<endif>

>>

InitializeControllerData(definition, controller) ::= <<
<controller.sources:{<(ctrlGenerator.(it.path).ControllerDataFactoryNew)(definition=definition, controller=controller)>}>
>>

ClearControllersData(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<ClearControllersDataRevers(definition=definition, controllers=definition.controllers)>
<endif>
>>

ClearControllersDataRevers(definition, controllers) ::= <<
<if (controllers)>
<ClearControllersDataRevers(definition=definition, controllers=rest(controllers))>
<ClearControllerData(definition=definition, controller=first(controllers))>
<endif>
>>

ClearControllerData(definition, controller) ::= <<
<controller.sources:{<(ctrlGenerator.(it.path).ControllerDataFactoryNewClear)(definition=definition, controller=controller)>}>
>>

DestroyComponents(definition) ::= <<
<if (definition.astNodeTypes.("component"))>
<if (definition.components)>
#define DESTROY_USE_ERROR0_LABEL
<definition.components:DestroyComponent(definition=definition, component=it)>
<endif>
<endif>
>>

DestroyComponent(definition, component) ::= <<
  /* destroy <component.name> sub-component */
  err = __component_<component.definitionReference.name;format="toCName">_destroy(destroyInstance->__component_internal_data.components.<component.name>, allocItf);
  if (err != 0) goto error0;
>>

DestroyControllersData(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:DestroyControllerData(definition=definition, controller=it)>
<endif>

>>

DestroyControllerData(definition, controller) ::= <<
<controller.sources:{<(ctrlGenerator.(it.path).ControllerDataFactoryDestroy)(definition=definition, controller=controller)>}>
>>


// -----------------------------------------------------------------------------
// Server interface stubs

ServerInterfaceStubs(definition, interfaceDefinitions) ::= <<
<if (definition.astDecorations.("is-singleton"))>
/* Start definition of server stubs */
<definition.interfaces:ServerInterfaceStub(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=it); separator="\n">
/* End definition of server stubs */

<if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
/* Start definition of internal server stubs */
<definition.internalInterfaces:ServerInterfaceStub(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=it); separator="\n">
/* End definition of internal server stubs */
<endif>
<endif>
<endif>
>>

ServerInterfaceStub(definition, interfaceDefinitions, itf) ::= <<
<if (isServer.(itf.role))>
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):{index | <interfaceDefinitions.(itf.signature).methods:ServerMethodStub(definition=definition, itf=itf, index=index, method=it); separator="\n">};separator="\n">
<else>
<interfaceDefinitions.(itf.signature).methods:ServerMethodStub(definition=definition, itf=itf, method=it); separator="\n">
<endif>
<endif>
>>

ServerMethodStub(definition, itf, index, method) ::= <<
<(idl2c.methodDef)(method=method,methodName=StubName(definition=definition, itfName=itf.name, index=index, methodName=method.name), withThisPtr="true")> { 
<if(method.vaArgs)>
  va_list args;
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  <(idl2c.varDef)(type=method.type, name="retval")>;
  <endif>
  va_start (args, <last(method.parameters).name>);
#ifdef INTERFACE_METHOD_<itf.name>_<method.vaArgs.dualMethodName>_OVERRIDDEN
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  retval =
  <endif>
  <METHODName(itfName=itf.name, index=index, methodName={INTERFACE_METHOD_<itf.name>_<method.vaArgs.dualMethodName>_OVERRIDDEN})>(<method.parameters:{<it.name>};separator=", ">, args);
#else
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  retval =
  <endif>
  <METHODName(itfName=itf.name, index=index, methodName=method.vaArgs.dualMethodName)>(<method.parameters:{<it.name>};separator=", ">, args);
#endif
  va_end(args);
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  return retval;
  <endif>
<else>
#ifdef INTERFACE_METHOD_<itf.name>_<method.name>_OVERRIDDEN
  <if (! ((idl2c.isVoidMethod)(method=method)))>
    return 
  <endif>
  <METHODName(itfName=itf.name, index=index, methodName={INTERFACE_METHOD_<itf.name>_<method.name>_OVERRIDDEN})>(<method.parameters:{<it.name>};separator=", ">);
#else
  <if (! ((idl2c.isVoidMethod)(method=method)))>
    return 
  <endif>
  <METHODName(itfName=itf.name, index=index, methodName=method.name)>(<method.parameters:{<it.name>};separator=", ">);
#endif
<endif>

}
>>


// -----------------------------------------------------------------------------
// V-Tables Initialization

ComponentVTableInit(definition, interfaceDefinitions) ::= <<
/* Start initialization of server interface V-Tables. */
<definition.interfaces:ServerInterfaceVTableInit(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=it); separator="\n">
/* End initialization of server interface V-Tables. */

<if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
/* Start initialization of internal server interface V-Tables */
<definition.internalInterfaces:ServerInterfaceVTableInit(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=it); separator="\n">
/* End initialization of internal server interface V-Tables */
<endif>
<endif>

>>

ServerInterfaceVTableInit(definition, interfaceDefinitions, itf) ::= <<
<if (isServer.(itf.role))>
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):ServerInterfaceVTableInit1(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=itf, index=it);separator="\n">
<else>
<ServerInterfaceVTableInit1(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=itf)>
<endif>
<endif>
>>

ServerInterfaceVTableInit1(definition, interfaceDefinitions, itf, index) ::= <<
<InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition, itf=itf, index=index)> = {
<if (definition.astDecorations.("is-singleton"))>
  <interfaceDefinitions.(itf.signature).methods:StubName(definition=definition, itfName=itf.name, index=index, methodName=it.name);separator=",\n">
<else>
  <interfaceDefinitions.(itf.signature).methods:VTableMethodInit(definition=definition, itf=itf, method=it, index=index);separator=",\n">
<endif>
};
>>

VTableMethodInit(definition, itf, method, index) ::= <<
#ifdef INTERFACE_METHOD_<itf.name>_<method.name>_OVERRIDDEN
<(idl2c.methodPointerCast)(method=method,withThisPtr="true")><METHODName(itfName=itf.name, index=index, methodName={INTERFACE_METHOD_<itf.name>_<method.name>_OVERRIDDEN})>
#else
<(idl2c.methodPointerCast)(method=method,withThisPtr="true")><METHODName(itfName=itf.name, index=index, methodName=it.name)>
#endif

>>


}$$
}