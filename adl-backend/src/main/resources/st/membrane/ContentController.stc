template st.membrane.ContentController : st.common.ComponentHelper implements st.membrane.ControllerGenerator { st.interfaces.IDLDefinition idl2c = st.interfaces.IDL2C; $${

// -----------------------------------------------------------------------------
// Implementation of the ControllerGenerator interface
// -----------------------------------------------------------------------------

ControllerGlobalDecl(definition, controller) ::= <<
#include "fractal/internal/CCDelegate.h"
>>

ControllerData(definition, controller) ::= <<
struct __component_ContentDescriptor *contentDesc;
>>

ControllerGlobalDataStaticInit(definition, controller) ::= <<
<staticInitContentBindingDescriptor(definition=definition, controller=controller)> \
fractal_api_Component instance_name##_dynamicSubComponent[10]; \
struct __component_ContentDescriptor instance_name##_contentDesc = { \
  sizeof(instance_name.__component_internal_data.components)/sizeof(fractal_api_Component), \
  (fractal_api_Component *) & instance_name.__component_internal_data.components, \
  sizeof(instance_name##_dynamicSubComponent)/sizeof(fractal_api_Component), \
  instance_name##_dynamicSubComponent, \
  sizeof(instance_name##_contentBindingDesc)/sizeof(struct __component_ContentBindingDescriptor), \
  instance_name##_contentBindingDesc \
};
>>

staticInitContentBindingDescriptor(definition, controller) ::= <<
struct __component_ContentBindingDescriptor instance_name##_contentBindingDesc[<bindingCount(definition=definition)> + 10] = { <if (definition.astNodeTypes.("binding"))><definition.bindings:staticInitContentBinding(definition=definition, controller=controller, binding=it);separator="\\\n"><endif> };
>>

staticInitContentBinding(definition, controller, binding) ::= <<
  { (fractal_api_Component) <staticSubComponentPointer(subComponentName=binding.fromComponent)>, \
    __COMPONENT_STRINGIFY_ITF_NAME(<binding.fromInterface><if (binding.fromInterfaceNumber)>[<binding.fromInterfaceNumber>]<endif>), \
    (fractal_api_Component) <staticSubComponentPointer(subComponentName=binding.toComponent)>, \
    __COMPONENT_STRINGIFY_ITF_NAME(<binding.toInterface><if (binding.toInterfaceNumber)>[<binding.toInterfaceNumber>]<endif>) }
>>

staticSubComponentPointer(subComponentName) ::= <<
<if (isThis.(subComponentName))> &instance_name
<else> &<subComponentName>
<endif>
>>

bindingCount(definition) ::= <<
<if (definition.astNodeTypes.("binding"))>
<length(definition.bindings)>
<else>
0
<endif>
>>

ControllerDataStaticInit(definition, controller) ::= <<
/* contentDesc */ &instance_name##_contentDesc,
>>

ControllerDataFactoryNew(definition, controller) ::= <<
  newInstance->__component_internal_data.contentDesc = 
    (struct __component_ContentDescriptor*) CALL_PTR((memory_api_Allocator) allocItf, alloc)(sizeof(struct __component_ContentDescriptor));
  
  newInstance->__component_internal_data.contentDesc->nbStaticSubComponent = 
    sizeof(newInstance->__component_internal_data.components)/sizeof(fractal_api_Component);
  newInstance->__component_internal_data.contentDesc->staticSubComponents = 
    (fractal_api_Component*) & newInstance->__component_internal_data.components;
  
  newInstance->__component_internal_data.contentDesc->nbDynamicSubComponent = 10;
  newInstance->__component_internal_data.contentDesc->dynamicSubComponents = 
    (fractal_api_Component*) CALL_PTR((memory_api_Allocator) allocItf, alloc)(sizeof(fractal_api_Component) * newInstance->__component_internal_data.contentDesc->nbDynamicSubComponent);
  
  newInstance->__component_internal_data.contentDesc->nbBindingDescriptor = <bindingCount(definition=definition)> + 10;
  newInstance->__component_internal_data.contentDesc->bindingDesc =
    (struct __component_ContentBindingDescriptor *) CALL_PTR((memory_api_Allocator) allocItf, alloc)(sizeof(struct __component_ContentBindingDescriptor *) * newInstance->__component_internal_data.contentDesc->nbBindingDescriptor);
  
  <if (definition.astNodeTypes.("binding"))><if (definition.bindings)>
  {
    int i = 0;
    <definition.bindings:factoryInitBinding(definition=definition, binding=it);separator="\n">
  }
  <endif><endif>
>>

factoryInitBinding(definition, binding) ::= <<
  newInstance->__component_internal_data.contentDesc->bindingDesc[i].clientComponent =
    (fractal_api_Component) <subComponentPointer(subComponentName=binding.fromComponent)>;
  newInstance->__component_internal_data.contentDesc->bindingDesc[i].clientItfName =
    __COMPONENT_STRINGIFY_ITF_NAME(<binding.fromInterface><if (binding.fromInterfaceNumber)>[<binding.fromInterfaceNumber>]<endif>);
  newInstance->__component_internal_data.contentDesc->bindingDesc[i].serverComponent =
    (fractal_api_Component) <subComponentPointer(subComponentName=binding.toComponent)>;
  newInstance->__component_internal_data.contentDesc->bindingDesc[i].serverItfName =
    __COMPONENT_STRINGIFY_ITF_NAME(<binding.toInterface><if (binding.toInterfaceNumber)>[<binding.toInterfaceNumber>]<endif>);
  i++;
>>

subComponentPointer(subComponentName) ::= <<
<if (isThis.(subComponentName))> newInstance
<else> /*<subComponentName>*/  newInstance->__component_internal_data.components.<subComponentName>
<endif>
>>


ControllerDataFactoryDestroy(definition, controller) ::= <<
  CALL_PTR((memory_api_Allocator) allocItf, free)(destroyInstance->__component_internal_data.contentDesc->bindingDesc);
  CALL_PTR((memory_api_Allocator) allocItf, free)(destroyInstance->__component_internal_data.contentDesc);
>>

ControllerImplementation(definition, controller, interfaceDefinitions) ::= <<

/* -----------------------------------------------------------------------------
   Implementation of the ContentController interface
----------------------------------------------------------------------------- */

<getFcSubComponents(definition=definition)>

<addFcSubComponent(definition=definition)>

<removeFcSubComponent(definition=definition)>

<addFcSubBinding(definition=definition)>

<removeFcSubBinding(definition=definition)>

>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------


getFcSubComponents(definition) ::= <<
int METH(contentController, getFcSubComponents)(fractal_api_Component subComponents[]) 
{
  return __component_getFcSubComponents(subComponents,
      <contentDescPointer(definition=definition)>);
}
>>

addFcSubComponent(definition) ::= <<
int METH(contentController, addFcSubComponent)(fractal_api_Component subComponent) 
{
  return __component_addFcSubComponents(subComponent,
      <contentDescPointer(definition=definition)>);
}
>>

removeFcSubComponent(definition) ::= <<
int METH(contentController, removeFcSubComponent)(fractal_api_Component subComponent) 
{
  return __component_removeFcSubComponents(subComponent,
      <contentDescPointer(definition=definition)>);
}
>>

addFcSubBinding(definition) ::= <<
int METH(contentController, addFcSubBinding)(fractal_api_Component clientComponent,
      __MIND_STRING_TYPEDEF clientItfName, fractal_api_Component serverComponent,
      __MIND_STRING_TYPEDEF serverItfName) 
{
  return __component_addFcSubBinding(clientComponent, clientItfName, serverComponent, serverItfName,
      <contentDescPointer(definition=definition)>);
}
>>

removeFcSubBinding(definition) ::= <<
int METH(contentController, removeFcSubBinding)(fractal_api_Component clientComponent,
      __MIND_STRING_TYPEDEF clientItfName) 
{
  return __component_removeFcSubBinding(clientComponent, clientItfName,
      <contentDescPointer(definition=definition)>);
}
>>

contentDescPointer(definition) ::= <<
CONTEXT_PTR_ACCESS->__component_internal_data.contentDesc
>>

}$$
}