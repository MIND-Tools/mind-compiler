template st.definitions.implementations.Macro
  : st.common.ComponentHelper
  implements st.definitions.implementations.ComponentDefinition {

st.interfaces.IDLDefinition idl2c = st.interfaces.IDL2C ; 

$${

  
isClient ::= [ "client" : "true" ]
isServer ::= [ "server" : "true" ]
isVoid   ::= [ "void"   : "true" ]

// -----------------------------------------------------------------------------
// Implementation of the ComponentDefinition interface
// -----------------------------------------------------------------------------

ComponentDefinition(definition, interfaceDefinitions) ::= <<
/* Generated file: <definition.name;format="nameToPath">.macro */

#define COMP_DATA struct __component_<definition.name;format="toCName">_internal_data_t __component_internal_data

#define PRIVATE_DATA_T <ComponentTypeName(definitionName=definition.name)>

<if (definition.astDecorations.("is-singleton"))>
/* New Private Data handling to avoid the "duplicate definitions" bug of PRIVATE with some families of picky compilers (such as IAR) */
#define PRIVATE __component_<definition.name;format="toCName">_singleton_instance_private_data
#define SINGLETON_PRIVATE_DATA_T <ComponentTypeName(definitionName=definition.name)>_private_t
<endif>

<CONTEXT_PTR(definition=definition)>

<METHOD(definition=definition)>

<ATTR(definition=definition)>

<DATA_FIELD_ACCESS(definition=definition)>

<CALL(definition=definition, interfaceDefinitions=interfaceDefinitions)>

<GET_MY_INTERFACE(definition=definition)>

<GET_COLLECTION_SIZE(definition=definition)>

<BIND_MY_INTERFACE(definition=definition)>

<IS_BOUND(definition=definition)>

#define CHECK_CONTEXT_PTR /* do nothing */

>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// CONTEXT_PTR macros

CONTEXT_PTR(definition) ::= <<
<if (definition.astDecorations.("is-singleton"))>
<SingletonCONTEXT_PTR(definition=definition)>
<else>
<MultiCONTEXT_PTR(definition=definition)>
<endif>
>>

MultiCONTEXT_PTR(definition) ::= <<
#define CONTEXT_PTR_DECL <ComponentTypeName(definitionName=definition.name)> *_mind_this
#define CONTEXT_PTR_DECL_OR_VOID <ComponentTypeName(definitionName=definition.name)> *_mind_this
#define CONTEXT_PTR_DECL_FROM_ARG(arg) <ComponentTypeName(definitionName=definition.name)> *_mind_this = ((<ComponentTypeName(definitionName=definition.name)> *) (arg))
#define CONTEXT_PTR_DECL_COMMA  CONTEXT_PTR_DECL,

#define CONTEXT_PTR_ACCESS _mind_this
#define CONTEXT_PTR_ACCESS_OR_VOID _mind_this
#define CONTEXT_PTR_ACCESS_OR_NULL _mind_this
#define CONTEXT_PTR_ACCESS_COMMA CONTEXT_PTR_ACCESS,
>>

SingletonCONTEXT_PTR(definition) ::= <<
#define CONTEXT_PTR_DECL
#define CONTEXT_PTR_DECL_OR_VOID void
#define CONTEXT_PTR_DECL_FROM_ARG(arg)
#define CONTEXT_PTR_DECL_COMMA

#define CONTEXT_PTR_ACCESS (&__component_<definition.name;format="toCName">_singleton_instance)
#define CONTEXT_PTR_ACCESS_OR_VOID
#define CONTEXT_PTR_ACCESS_OR_NULL NULL
#define CONTEXT_PTR_ACCESS_COMMA
>>

// -----------------------------------------------------------------------------
// METHOD macros

METHOD(definition) ::= <<
/* definition of the METH macros */
#define INTERFACE_METHOD(itf,meth) __component_<definition.name;format="toCName">_##itf##_##meth
#define INTERFACE_COLLECTION_METHOD(itf,idx,meth) __component_<definition.name;format="toCName">_##itf##_##idx##_##meth
#define PRIVATE_METHOD(meth) __component_<definition.name;format="toCName">_##meth

/* definition of the CONSTRUCTOR macro */
#define CONSTRUCTOR_METHOD void __component_<definition.name;format="toCName">_constructor NO_PARAM_DECL

/* definition of the DESTRUCTOR macro */
#define DESTRUCTOR_METHOD void __component_<definition.name;format="toCName">_destructor NO_PARAM_DECL

/* definition of the PARAM_DECL macros */
#define PARAM_DECL_BEGIN ( CONTEXT_PTR_DECL_COMMA
#define PARAM_DECL_END )
#define NO_PARAM_DECL (CONTEXT_PTR_DECL_OR_VOID)
>>

// -----------------------------------------------------------------------------
// ATTRIBUTE macros

ATTR(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))>
<if (definition.attributes)>
/* definition of the ATTR macro */
<if (definition.astDecorations.("is-singleton"))>
#define ATTRIBUTE_ACCESS(attrName) (__component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.attributes.attrName)
<else>
#define ATTRIBUTE_ACCESS(attrName) (CONTEXT_PTR_ACCESS->__component_internal_data.attributes.attrName)
<endif>
<endif>
<endif>
>>

// -----------------------------------------------------------------------------
// PRIVATE DataField access macros

DATA_FIELD_ACCESS(definition) ::= <<
#define DATA_FIELD_ACCESS(fieldName) (CONTEXT_PTR_ACCESS->__component_internal_data.dataFields.fieldName)
>>


// -----------------------------------------------------------------------------
// CALL macros

CALL(definition, interfaceDefinitions) ::= <<
/* definition of the CALL macros */
#define CALL_INTERFACE_METHOD_WITH_PARAM(itfName, methName) CALL_INTERFACE_METHOD_##itfName##_WITH_PARAM(methName)
#define CALL_INTERFACE_METHOD_WITHOUT_PARAM(itfName, methName) CALL_INTERFACE_METHOD_##itfName##_WITHOUT_PARAM(methName)

#define CALL_COLLECTION_INTERFACE_METHOD_WITH_PARAM(itfName, index, methName) CALL_COLLECTION_INTERFACE_METHOD_##itfName##_WITH_PARAM(index, methName)
#define CALL_COLLECTION_INTERFACE_METHOD_WITHOUT_PARAM(itfName, index, methName) CALL_COLLECTION_INTERFACE_METHOD_##itfName##_WITHOUT_PARAM(index, methName)

<definition.interfaces:CALLClientInterface(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=it); separator="\n">
<definition.interfaces:CALLServerInterface(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=it); separator="\n">

<CALL_PRV(definition=definition)>

<CALL_PTR(definition=definition)>

#define PARAMS_RPARENT )

>>

CALLClientInterface(definition, interfaceDefinitions, itf) ::= <<
<if (isClient.(itf.role))>
<if (definition.astDecorations.("is-singleton"))>
<SingletonCALLClientInterface(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=itf)>
<else>
<MultiCALLClientInterface(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=itf)>
<endif>
<endif>
>>

MultiCALLClientInterface(definition, interfaceDefinitions, itf) ::= <<
<if (itf.numberOfElement)>
#define CALL_COLLECTION_INTERFACE_METHOD_<itf.name>_WITH_PARAM(index, methName) CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>[(index)]->meths->methName(CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>[(index)]->selfData,
#define CALL_COLLECTION_INTERFACE_METHOD_<itf.name>_WITHOUT_PARAM(index, methName) CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>[(index)]->meths->methName(CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>[(index)]->selfData)
<else>
#define CALL_INTERFACE_METHOD_<itf.name>_WITH_PARAM(methName) CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>->meths->methName(CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>->selfData,
#define CALL_INTERFACE_METHOD_<itf.name>_WITHOUT_PARAM(methName) CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>->meths->methName(CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>->selfData)
<endif>
>>

SingletonCALLClientInterface(definition, interfaceDefinitions, itf) ::= <<
<if (itf.numberOfElement)>
#define CALL_COLLECTION_INTERFACE_METHOD_<itf.name>_WITH_PARAM(index, methName) __component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>[(index)]->meths->methName(__component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>[(index)]->selfData,
#define CALL_COLLECTION_INTERFACE_METHOD_<itf.name>_WITHOUT_PARAM(index, methName) __component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>[(index)]->meths->methName(__component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>[(index)]->selfData)
<else>
#define CALL_INTERFACE_METHOD_<itf.name>_WITH_PARAM(methName) __component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>->meths->methName(__component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>->selfData,
#define CALL_INTERFACE_METHOD_<itf.name>_WITHOUT_PARAM(methName) __component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>->meths->methName(__component_<definition.name;format="toCName">_singleton_instance.__component_internal_data.type.<itf.name>->selfData)
<endif>
>>

CALLServerInterface(definition, interfaceDefinitions, itf) ::= <<
<if (isServer.(itf.role))>
<if (itf.numberOfElement)>
#define CALL_COLLECTION_INTERFACE_METHOD_<itf.name>_WITH_PARAM(index, methName) <vTableInstanceName(definition=definition, itf=itf, index="##index##")>.methName(CONTEXT_PTR_ACCESS,
#define CALL_COLLECTION_INTERFACE_METHOD_<itf.name>_WITHOUT_PARAM(index, methName) <vTableInstanceName(definition=definition, itf=itf, index="##index##")>.methName(CONTEXT_PTR_ACCESS)
<else>
#define CALL_INTERFACE_METHOD_<itf.name>_WITH_PARAM(methName) <vTableInstanceName(definition=definition, itf=itf)>.methName(CONTEXT_PTR_ACCESS,
#define CALL_INTERFACE_METHOD_<itf.name>_WITHOUT_PARAM(methName) <vTableInstanceName(definition=definition, itf=itf)>.methName(CONTEXT_PTR_ACCESS)
<endif>
<endif>
>>

CALL_PRV(definition) ::= <<
/* definition of the CALL_PRV macro */
<if (definition.astDecorations.("is-singleton"))>
<SingletonCALL_PRV(definition=definition)>
<else>
<MultiCALL_PRV(definition=definition)>
<endif>
>>

MultiCALL_PRV(definition) ::= <<
#define CALL_PRIVATE_METHOD_WITH_PARAM(methName) PRIVATE_METHOD(methName)(CONTEXT_PTR_ACCESS,
#define CALL_PRIVATE_METHOD_WITHOUT_PARAM(methName) PRIVATE_METHOD(methName)(CONTEXT_PTR_ACCESS)
>>

SingletonCALL_PRV(definition) ::= <<
#define CALL_PRIVATE_METHOD_WITH_PARAM(methName) PRIVATE_METHOD(methName)(
#define CALL_PRIVATE_METHOD_WITHOUT_PARAM(methName) PRIVATE_METHOD(methName)()
>>

CALL_PTR(definition) ::= <<
#define CALL_INTERFACE_PTR_WITH_PARAM(itf_ptr, methName) (itf_ptr)->meths->methName((itf_ptr)->selfData,
#define CALL_INTERFACE_PTR_WITHOUT_PARAM(itf_ptr, methName) (itf_ptr)->meths->methName((itf_ptr)->selfData)

<if (definition.astDecorations.("is-singleton"))>
<SingletonCALL_PTR(definition=definition)>
<else>
<MultiCALL_PTR(definition=definition)>
<endif>

>>

MultiCALL_PTR(definition) ::= <<
#define CALL_METHOD_PTR_WITH_PARAM(methPtr) (methPtr)(CONTEXT_PTR_ACCESS,
#define CALL_METHOD_PTR_WITHOUT_PARAM(methPtr) (methPtr)(CONTEXT_PTR_ACCESS)
>>

SingletonCALL_PTR(definition) ::= <<
#define CALL_METHOD_PTR_WITH_PARAM(methPtr) (methPtr)(
#define CALL_METHOD_PTR_WITHOUT_PARAM(methName) (methPtr)()
>>

// -----------------------------------------------------------------------------
// other macros

GET_MY_INTERFACE(definition) ::= <<
/* definition of the GET_MY_INTERFACE macro */
#define GET_MY_INTERFACE(itfName) GET_MY_INTERFACE_##itfName
#define GET_MY_INTERFACE_COLLECTION(itfName, index) GET_MY_INTERFACE_##itfName(index)

<definition.interfaces:GET_MY_INTERFACEInterface(definition=definition, itf=it); separator="\n">
>>

GET_MY_INTERFACEInterface(definition, itf) ::= <<
<if (itf.numberOfElement)>
<if (isClient.(itf.role))>
#define GET_MY_INTERFACE_<itf.name>(index) (CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>[(index)])
<else>
#define GET_MY_INTERFACE_<itf.name>(index) (& (CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>[(index)]))
<endif>
<else>
<if (isClient.(itf.role))>
#define GET_MY_INTERFACE_<itf.name> (CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>)
<else>
#define GET_MY_INTERFACE_<itf.name> (& (CONTEXT_PTR_ACCESS->__component_internal_data.type.<itf.name>))
<endif>
<endif>
>>

GET_COLLECTION_SIZE(definition) ::= <<
/* definition of the GET_COLLECTION_SIZE macro */
#define GET_COLLECTION_SIZE(itfName) GET_COLLECTION_SIZE_##itfName

<definition.interfaces:GET_COLLECTION_SIZEInterface(definition=definition, itf=it); separator="\n">
>>

GET_COLLECTION_SIZEInterface(definition, itf) ::= <<
<if (itf.numberOfElement)>
#define GET_COLLECTION_SIZE_<itf.name> <itf.numberOfElement>
<else>
#define GET_COLLECTION_SIZE_<itf.name> 0
<endif>
>>

BIND_MY_INTERFACE(definition) ::= <<

#define BIND_MY_INTERFACE(itfName, serverItf) do { \
  GET_MY_INTERFACE(itfName) = (serverItf); \
  } while (0)
#define BIND_MY_INTERFACE_COLLECTION(itfName, idx, serverItf) do { \
  GET_MY_INTERFACE_COLLECTION(itfName, idx) = (serverItf); \
  } while (0)
>>

IS_BOUND(definition) ::= <<

#define IS_BOUND(itfName) IS_BOUND_PTR(GET_MY_INTERFACE(itfName))
#define IS_BOUND_COLLECTION(itfName, idx) IS_BOUND_PTR(GET_MY_INTERFACE_COLLECTION(itfName, idx))
#define IS_BOUND_PTR(itfPtr) __component_is_bound(itfPtr)

>>

}$$

}
