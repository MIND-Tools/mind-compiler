<!--
  Copyright (C) 2011 STMicroelectronics

 This file is part of "Mind Compiler" is free software: you can redistribute 
 it and/or modify it under the terms of the GNU Lesser General Public License 
 as published by the Free Software Foundation, either version 3 of the 
 License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful, but WITHOUT 
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 details.

 You should have received a copy of the GNU Lesser General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Contact: mind@ow2.org

 Authors: Matthieu Leclercq
 Contributors: 

 -->
<?xml version="1.0" encoding="UTF-8" ?>

<!--
The Guice Module extension point allows to define Modules that must be used to 
instantiate the mindc compiler.
-->
<!ELEMENT extension (module+) >
<!ATTLIST extension
  point CDATA #REQUIRED
  id CDATA #IMPLIED
  name CDATA #IMPLIED
>

<!--
Define a Guice Module. An enablement condition can be specified. If not 
specified the module is always used.

class: The Module class. Must implement "com.google.inject.Module"
-->
<!ELEMENT module (override?, combine?, enableWhen?) >
<!ATTLIST module
  class CDATA #REQUIRED
>

<!--
Specify that the module overrides another module. This uses module overriding 
performed by "com.google.inject.util.Modules.override".
see: http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/util/Modules.html

class: The class of the overridden module.
-->
<!ELEMENT override EMPTY>
<!ATTLIST override
  class CDATA #REQUIRED
>

<!--
Specify that the module must be combined with another module.
see http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/util/Modules.html
This should be used only as a workaround to a limitation of Guice 2.0 in case of
overriding a modules that defines multibinding.

class: The class of the combined module.
-->
<!ELEMENT combine EMPTY>
<!ATTLIST combine
  class CDATA #REQUIRED
>

<!--
The condition used to determine if the module has to be used.
-->
<!ELEMENT enableWhen (or | and | not | cmdOption | contextContains)>
<!ATTLIST enableWhen >

<!-- Lazy or -->
<!ELEMENT or (or | and | not | cmdOption | contextContains)+>
<!ATTLIST or >

<!-- Lazy and -->
<!ELEMENT and (or | and | not | cmdOption | contextContains)+>
<!ATTLIST and >

<!-- not -->
<!ELEMENT not (or | and | not | cmdOption | contextContains)>
<!ATTLIST not >

<!--
Tests if a given option has been specified on the command-line.

id: The identifier of a command-line option.
value: If specified, checks that the value of the command-line option matches 
    the given string. This attribute can be used only if the command-line 
    option is a cmdArgument, a cmdAppendOption or a cmdPathOption.
valueRegExp: If specified, checks that the value of the command-line option 
    matches the given regular expression. This attribute can be used only if the
    command-line option is a cmdArgument, a cmdAppendOption or a cmdPathOption.
-->
<!ELEMENT cmdOption EMPTY >
<!ATTLIST cmdOption
  id CDATA #REQUIRED
  value CDATA #IMPLIED
  valueRegExp CDATA #IMPLIED
>

<!--
Tests if the compilation context contains a given key.

key: The key to search in the compilation context.
value: If specified, checks that the value associated with the given key matches 
    the given string. If the value in the context is not a string, its string 
    representation is obtained using "toString()"
valueRegExp: If specified, checks that the value associated with the given key
    matches the given regular expression. If the value in the context is not a 
    string, its string representation is obtained using "toString()"
-->
<!ELEMENT contextContains EMPTY>
<!ATTLIST contextContains
  key CDATA #REQUIRED
  value CDATA #IMPLIED
  valueRegExp CDATA #IMPLIED
>
