template st.membrane.AttributeController
  : st.common.ComponentHelper
  implements st.membrane.ControllerGenerator {

st.interfaces.IDLDefinition idl2c = st.interfaces.IDL2C; 

$${

// -----------------------------------------------------------------------------
// Implementation of the ControllerGenerator interface
// -----------------------------------------------------------------------------

ControllerImplementation(definition, controller, interfaceDefinitions) ::= <<

/* -----------------------------------------------------------------------------
   Implementation of the AttributeController interface
----------------------------------------------------------------------------- */

#include "fractal/internal/ACdelegate.h"

<initAttributeDescriptors(definition=definition)>

<listFcAttributes(definition=definition)>

<getFcAttribute(definition=definition)>

<getFcAttributeSize(definition=definition)>

<getFcAttributeType(definition=definition)>

<setFcAttribute(definition=definition)>

>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

initAttributeDescriptors(definition) ::= <<
static struct {
  int nbAttributes;
  struct __component_AttributeDescriptor attributeDesc[<length(definition.attributes)>];
} __component_<definition.name;format="toCName">_attribute_descriptor = {
  <length(definition.attributes)>, /* nbAttributes */
  { /* attributeDesc */
    <definition.attributes:initAttributeDescriptor(definition=definition, attribute=it);separator=",\n">
  }
};
>>

attributeDescriptorType ::= [ 
  "int"       : "INT_ATTR_TYPE",
  "string"    : "STRING_ATTR_TYPE",
  "int8_t"    : "INT8_T_ATTR_TYPE",
  "uint8_t"   : "UINT8_T_ATTR_TYPE",
  "int16_t"   : "INT16_T_ATTR_TYPE",
  "uint16_t"  : "UINT16_T_ATTR_TYPE",
  "int32_t"   : "INT32_T_ATTR_TYPE",
  "uint32_t"  : "UINT32_T_ATTR_TYPE",
  "int64_t"   : "INT64_T_ATTR_TYPE",
  "uint64_t"  : "UINT64_T_ATTR_TYPE",
  "intprt_t"  : "INTPTR_T_ATTR_TYPE",
  "uintptr_t" : "UINTPTR_T_ATTR_TYPE",
  default     : "UNKNOWN_ATTR_TYPE"
]

initAttributeDescriptor(definition, attribute) ::= <<
__COMPONENT_INIT_ATTRIBUTE_DESCRIPTOR(<ComponentTypeName(definitionName=definition.name)>, <attribute.name>, <attributeDescriptorType.(attribute.type)>)
>>

listFcAttributes(definition) ::= <<
int METH(attributeController, listFcAttributes)(__MIND_STRING_TYPEDEF attributeNames[]) 
{
  return __component_listFcAttributes_delegate(attributeNames,
      <attributeDescPointer(definition=definition)>);
}
>>

getFcAttribute(definition) ::= <<
int METH(attributeController, getFcAttribute)(__MIND_STRING_TYPEDEF attributeName,
    void **value) 
{
  return __component_getFcAttribute_delegate(attributeName, value,
      <attributeDescPointer(definition=definition)>, 
      <componentPointer(definition=definition)>);
}
>>

getFcAttributeSize(definition) ::= <<
int METH(attributeController, getFcAttributeSize)(__MIND_STRING_TYPEDEF attributeName) 
{
  return __component_getFcAttributeSize_delegate(attributeName,
      <attributeDescPointer(definition=definition)>);
}
>>

getFcAttributeType(definition) ::= <<
int METH(attributeController, getFcAttributeType)(__MIND_STRING_TYPEDEF attributeName,
  enum AttributeType *type) 
{
  return __component_getFcAttributeType_delegate(attributeName, type,
      <attributeDescPointer(definition=definition)>);
}
>>

setFcAttribute(definition) ::= <<
int METH(attributeController, setFcAttribute)(__MIND_STRING_TYPEDEF attributeName, 
    void *value) 
{
  return __component_setFcAttribute_delegate(attributeName, value,
      <attributeDescPointer(definition=definition)>, 
      <componentPointer(definition=definition)>);
}
>>


attributeDescPointer(definition) ::= <<
((struct __component_AttributeDescriptors *) &__component_<definition.name;format="toCName">_attribute_descriptor)
>>

componentPointer(definition) ::= <<
<if (definition.astDecorations.("is-singleton"))>
(&__component_<definition.name;format="toCName">_singleton_instance)
<else>
CONTEXT_PTR_ACCESS
<endif>
>>

}$$
}