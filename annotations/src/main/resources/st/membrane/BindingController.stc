template st.membrane.BindingController
  : st.common.ComponentHelper
  implements st.membrane.ControllerGenerator {

st.interfaces.IDLDefinition idl2c = st.interfaces.IDL2C; 

$${

// -----------------------------------------------------------------------------
// Implementation of the ControllerGenerator interface
// -----------------------------------------------------------------------------

ControllerImplementation(definition, controller, interfaceDefinitions) ::= <<

/* -----------------------------------------------------------------------------
   Implementation of the BindindController interface
----------------------------------------------------------------------------- */

#include "fractal/internal/BCdelegate.h"

<initBindingDescriptors(definition=definition)>

<listFc(definition=definition)>

<lookupFc(definition=definition)>

<bindFc(definition=definition)>

<unbindFc(definition=definition)>

>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

initBindingDescriptors(definition) ::= <<
/* The binding descriptor is useful only if one of the binding controller method
   is not implemented in source code. */
#if ! defined(INTERFACE_METHOD_bindingController_listFc_IMPLEMENTED) \
   || ! defined(INTERFACE_METHOD_bindingController_lookupFc_IMPLEMENTED) \
   || ! defined(INTERFACE_METHOD_bindingController_bindFc_IMPLEMENTED) \
   || ! defined(INTERFACE_METHOD_bindingController_unbindFc_IMPLEMENTED)

static struct {
  int nbBindings;
  struct __component_BindingDescriptor bindingDesc[<bindingCount(definition=definition)>];
} __component_<definition.name;format="toCName">_binding_descriptor = {
  <bindingCount(definition=definition)>, /* nbBindings */
  { /* bindingDesc */
    <definition.interfaces:initBindingDescriptor(definition=definition, itf=it);separator="\n">
  }
};

#endif
>>

bindingCount(definition) ::= <<
<definition.interfaces:countClientInterfaces(itf=it)> 0
>>

countClientInterfaces(itf) ::= <<
<if (isClient.(itf.role))>
<if (itf.numberOfElement)>
<itf.numberOfElement> + 
<else>
1 +
<endif>
<endif>
>>

initBindingDescriptor(definition, itf) ::= <<
<if (isClient.(itf.role))>
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):initBindingDescriptor1(definition=definition, itf=itf, index=it);separator=",\n">,
<else>
<initBindingDescriptor1(definition=definition, itf=itf)>,
<endif>
<endif>
>>

initBindingDescriptor1(definition, itf, index) ::= <<
<if (itf.astDecorations.("delegated-interface"))>
__COMPONENT_INIT_DELEGATE_BINDING_DESCRIPTOR(<ComponentTypeName(definitionName=definition.name)>, <itf.name><if (index)>[<index>]<endif>, <itf.astDecorations.("delegated-interface").name><if (index)>[<index>]<endif>)
<else>
__COMPONENT_INIT_BINDING_DESCRIPTOR(<ComponentTypeName(definitionName=definition.name)>, <itf.name><if (index)>[<index>]<endif>)
<endif>
>> 

listFc(definition) ::= <<
#ifndef INTERFACE_METHOD_bindingController_listFc_IMPLEMENTED
int METH(bindingController, listFc)(__MIND_STRING_TYPEDEF clientItfNames[]) 
{
  return __component_listFc_delegate(clientItfNames,
      <bindingDescPointer(definition=definition)>);
}
#endif
>>

lookupFc(definition) ::= <<
#ifndef INTERFACE_METHOD_bindingController_lookupFc_IMPLEMENTED
int METH(bindingController, lookupFc)(__MIND_STRING_TYPEDEF clientItfName,
    void **interfaceReference) 
{
  return __component_lookupFc_delegate(clientItfName, interfaceReference,
      <bindingDescPointer(definition=definition)>, 
      <componentPointer(definition=definition)>);
}
#endif
>>

bindFc(definition) ::= <<
#ifndef INTERFACE_METHOD_bindingController_bindFc_IMPLEMENTED
int METH(bindingController, bindFc)(__MIND_STRING_TYPEDEF clientItfName, void *serverItf) 
{
  return __component_bindFc_delegate(clientItfName, serverItf,
      <bindingDescPointer(definition=definition)>, 
      <componentPointer(definition=definition)>);
}
#endif
>>

unbindFc(definition) ::= <<
#ifndef INTERFACE_METHOD_bindingController_unbindFc_IMPLEMENTED
int METH(bindingController, unbindFc)(__MIND_STRING_TYPEDEF clientItfName) 
{
  return __component_unbindFc_delegate(clientItfName,
      <bindingDescPointer(definition=definition)>, 
      <componentPointer(definition=definition)>);
}
#endif
>>


bindingDescPointer(definition) ::= <<
((void *) &__component_<definition.name;format="toCName">_binding_descriptor)
>>

componentPointer(definition) ::= <<
<if (definition.astDecorations.("is-singleton"))>
(&__component_<definition.name;format="toCName">_singleton_instance)
<else>
CONTEXT_PTR_ACCESS
<endif>
>>

}$$
}